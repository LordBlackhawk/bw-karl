// This file is auto generated by BWPlanWriter.

#include "bwplan-internal.h"

typedef ResourceIndex RI;
typedef OperationIndex OI;

std::string ResourceIndex::getName() const
{
	switch(index_)
	{
		case TerranWorker:
			return "TerranWorker";
		case ProtossWorker:
			return "ProtossWorker";
		case ZergWorker:
			return "ZergWorker";
		case TerranGasWorker:
			return "TerranGasWorker";
		case ProtossGasWorker:
			return "ProtossGasWorker";
		case ZergGasWorker:
			return "ZergGasWorker";
		case TerranSupply:
			return "TerranSupply";
		case ProtossSupply:
			return "ProtossSupply";
		case ZergSupply:
			return "ZergSupply";
		case GasWorkingPlaces:
			return "GasWorkingPlaces";
		case Larva:
			return "Larva";
		case Minerals:
			return "Minerals";
		case Gas:
			return "Gas";
		case TerranCommandCenter:
			return "TerranCommandCenter";
		case TerranComsatStation:
			return "TerranComsatStation";
		case TerranNuclearSilo:
			return "TerranNuclearSilo";
		case TerranBarracks:
			return "TerranBarracks";
		case TerranAcademy:
			return "TerranAcademy";
		case TerranFactory:
			return "TerranFactory";
		case TerranStarport:
			return "TerranStarport";
		case TerranControlTower:
			return "TerranControlTower";
		case TerranScienceFacility:
			return "TerranScienceFacility";
		case TerranCovertOps:
			return "TerranCovertOps";
		case TerranPhysicsLab:
			return "TerranPhysicsLab";
		case TerranMachineShop:
			return "TerranMachineShop";
		case TerranEngineeringBay:
			return "TerranEngineeringBay";
		case TerranArmory:
			return "TerranArmory";
		case ZergInfestedCommandCenter:
			return "ZergInfestedCommandCenter";
		case ZergHatchery:
			return "ZergHatchery";
		case ZergLair:
			return "ZergLair";
		case ZergHive:
			return "ZergHive";
		case ZergHydraliskDen:
			return "ZergHydraliskDen";
		case ZergDefilerMound:
			return "ZergDefilerMound";
		case ZergGreaterSpire:
			return "ZergGreaterSpire";
		case ZergQueensNest:
			return "ZergQueensNest";
		case ZergEvolutionChamber:
			return "ZergEvolutionChamber";
		case ZergUltraliskCavern:
			return "ZergUltraliskCavern";
		case ZergSpire:
			return "ZergSpire";
		case ZergSpawningPool:
			return "ZergSpawningPool";
		case ProtossNexus:
			return "ProtossNexus";
		case ProtossRoboticsFacility:
			return "ProtossRoboticsFacility";
		case ProtossObservatory:
			return "ProtossObservatory";
		case ProtossGateway:
			return "ProtossGateway";
		case ProtossCitadelofAdun:
			return "ProtossCitadelofAdun";
		case ProtossCyberneticsCore:
			return "ProtossCyberneticsCore";
		case ProtossTemplarArchives:
			return "ProtossTemplarArchives";
		case ProtossForge:
			return "ProtossForge";
		case ProtossStargate:
			return "ProtossStargate";
		case ProtossFleetBeacon:
			return "ProtossFleetBeacon";
		case ProtossArbiterTribunal:
			return "ProtossArbiterTribunal";
		case ProtossRoboticsSupportBay:
			return "ProtossRoboticsSupportBay";
		case LurkerAspect:
			return "LurkerAspect";
		case TerranInfantryArmor:
			return "TerranInfantryArmor";
		case TerranVehiclePlating:
			return "TerranVehiclePlating";
		case TerranShipPlating:
			return "TerranShipPlating";
		case ZergCarapace:
			return "ZergCarapace";
		case ZergFlyerCarapace:
			return "ZergFlyerCarapace";
		case ProtossGroundArmor:
			return "ProtossGroundArmor";
		case ProtossAirArmor:
			return "ProtossAirArmor";
		case TerranInfantryWeapons:
			return "TerranInfantryWeapons";
		case TerranVehicleWeapons:
			return "TerranVehicleWeapons";
		case TerranShipWeapons:
			return "TerranShipWeapons";
		case ZergMeleeAttacks:
			return "ZergMeleeAttacks";
		case ZergMissileAttacks:
			return "ZergMissileAttacks";
		case ZergFlyerAttacks:
			return "ZergFlyerAttacks";
		case ProtossGroundWeapons:
			return "ProtossGroundWeapons";
		case ProtossAirWeapons:
			return "ProtossAirWeapons";
		case ProtossPlasmaShields:
			return "ProtossPlasmaShields";
		case U_238Shells:
			return "U_238Shells";
		case IonThrusters:
			return "IonThrusters";
		case TitanReactor:
			return "TitanReactor";
		case OcularImplants:
			return "OcularImplants";
		case MoebiusReactor:
			return "MoebiusReactor";
		case ApolloReactor:
			return "ApolloReactor";
		case ColossusReactor:
			return "ColossusReactor";
		case VentralSacs:
			return "VentralSacs";
		case Antennae:
			return "Antennae";
		case PneumatizedCarapace:
			return "PneumatizedCarapace";
		case MetabolicBoost:
			return "MetabolicBoost";
		case AdrenalGlands:
			return "AdrenalGlands";
		case MuscularAugments:
			return "MuscularAugments";
		case GroovedSpines:
			return "GroovedSpines";
		case GameteMeiosis:
			return "GameteMeiosis";
		case MetasynapticNode:
			return "MetasynapticNode";
		case SingularityCharge:
			return "SingularityCharge";
		case LegEnhancements:
			return "LegEnhancements";
		case ScarabDamage:
			return "ScarabDamage";
		case ReaverCapacity:
			return "ReaverCapacity";
		case GraviticDrive:
			return "GraviticDrive";
		case SensorArray:
			return "SensorArray";
		case GraviticBoosters:
			return "GraviticBoosters";
		case KhaydarinAmulet:
			return "KhaydarinAmulet";
		case ApialSensors:
			return "ApialSensors";
		case GraviticThrusters:
			return "GraviticThrusters";
		case CarrierCapacity:
			return "CarrierCapacity";
		case KhaydarinCore:
			return "KhaydarinCore";
		case ArgusJewel:
			return "ArgusJewel";
		case ArgusTalisman:
			return "ArgusTalisman";
		case CaduceusReactor:
			return "CaduceusReactor";
		case ChitinousPlating:
			return "ChitinousPlating";
		case AnabolicSynthesis:
			return "AnabolicSynthesis";
		case CharonBoosters:
			return "CharonBoosters";
		default:
			return "[UNKNOWN]";
	}
}

bool ResourceIndex::isGrowthing() const
{
	switch(index_)
	{
		case Larva:
		case Minerals:
		case Gas:
			return true;
		default:
			return false;
	}
}

int ResourceIndex::getScaling() const
{
	switch(index_)
	{
		case Larva:
			return 240;
		case Minerals:
			return 1000;
		case Gas:
			return 1000;
		default:
			return 1;
	}
}

std::set<OperationIndex> ResourceIndex::getAssociatedOperations() const
{
	std::set<OperationIndex> result;
	switch(index_)
	{
		case TerranSupply:
			result.insert(OI::TerranSupplyDepot);
			break;
		case ProtossSupply:
			result.insert(OI::ProtossPylon);
			break;
		case ZergSupply:
			result.insert(OI::ZergOverlord);
			break;
		case GasWorkingPlaces:
			result.insert(OI::TerranRefinery);
			result.insert(OI::ZergExtractor);
			result.insert(OI::ProtossAssimilator);
			break;
		case Larva:
			result.insert(OI::ZergHatchery);
			break;
		case Minerals:
			result.insert(OI::TerranSCV);
			result.insert(OI::ZergDrone);
			result.insert(OI::ProtossProbe);
			break;
		case Gas:
			result.insert(OI::SendTerranGasWorker);
			result.insert(OI::SendProtossGasWorker);
			result.insert(OI::SendZergGasWorker);
			break;
		case TerranCommandCenter:
			result.insert(OI::TerranCommandCenter);
			break;
		case TerranComsatStation:
			result.insert(OI::TerranComsatStation);
			break;
		case TerranNuclearSilo:
			result.insert(OI::TerranNuclearSilo);
			break;
		case TerranBarracks:
			result.insert(OI::TerranBarracks);
			break;
		case TerranAcademy:
			result.insert(OI::TerranAcademy);
			break;
		case TerranFactory:
			result.insert(OI::TerranFactory);
			break;
		case TerranStarport:
			result.insert(OI::TerranStarport);
			break;
		case TerranControlTower:
			result.insert(OI::TerranControlTower);
			break;
		case TerranScienceFacility:
			result.insert(OI::TerranScienceFacility);
			break;
		case TerranCovertOps:
			result.insert(OI::TerranCovertOps);
			break;
		case TerranPhysicsLab:
			result.insert(OI::TerranPhysicsLab);
			break;
		case TerranMachineShop:
			result.insert(OI::TerranMachineShop);
			break;
		case TerranEngineeringBay:
			result.insert(OI::TerranEngineeringBay);
			break;
		case TerranArmory:
			result.insert(OI::TerranArmory);
			break;
		case ZergHatchery:
			result.insert(OI::ZergHatchery);
			break;
		case ZergLair:
			result.insert(OI::ZergLair);
			break;
		case ZergHive:
			result.insert(OI::ZergHive);
			break;
		case ZergHydraliskDen:
			result.insert(OI::ZergHydraliskDen);
			break;
		case ZergDefilerMound:
			result.insert(OI::ZergDefilerMound);
			break;
		case ZergGreaterSpire:
			result.insert(OI::ZergGreaterSpire);
			break;
		case ZergQueensNest:
			result.insert(OI::ZergQueensNest);
			break;
		case ZergEvolutionChamber:
			result.insert(OI::ZergEvolutionChamber);
			break;
		case ZergUltraliskCavern:
			result.insert(OI::ZergUltraliskCavern);
			break;
		case ZergSpire:
			result.insert(OI::ZergSpire);
			break;
		case ZergSpawningPool:
			result.insert(OI::ZergSpawningPool);
			break;
		case ProtossNexus:
			result.insert(OI::ProtossNexus);
			break;
		case ProtossRoboticsFacility:
			result.insert(OI::ProtossRoboticsFacility);
			break;
		case ProtossObservatory:
			result.insert(OI::ProtossObservatory);
			break;
		case ProtossGateway:
			result.insert(OI::ProtossGateway);
			break;
		case ProtossCitadelofAdun:
			result.insert(OI::ProtossCitadelofAdun);
			break;
		case ProtossCyberneticsCore:
			result.insert(OI::ProtossCyberneticsCore);
			break;
		case ProtossTemplarArchives:
			result.insert(OI::ProtossTemplarArchives);
			break;
		case ProtossForge:
			result.insert(OI::ProtossForge);
			break;
		case ProtossStargate:
			result.insert(OI::ProtossStargate);
			break;
		case ProtossFleetBeacon:
			result.insert(OI::ProtossFleetBeacon);
			break;
		case ProtossArbiterTribunal:
			result.insert(OI::ProtossArbiterTribunal);
			break;
		case ProtossRoboticsSupportBay:
			result.insert(OI::ProtossRoboticsSupportBay);
			break;
		case LurkerAspect:
			result.insert(OI::LurkerAspect);
			break;
		default:
			break;
	}
	return result;
}

BWAPI::Race ResourceIndex::associatedRace() const
{
	switch(index_)
	{
		case TerranCommandCenter:
			return BWAPI::Races::Terran;
		case TerranComsatStation:
			return BWAPI::Races::Terran;
		case TerranNuclearSilo:
			return BWAPI::Races::Terran;
		case TerranBarracks:
			return BWAPI::Races::Terran;
		case TerranAcademy:
			return BWAPI::Races::Terran;
		case TerranFactory:
			return BWAPI::Races::Terran;
		case TerranStarport:
			return BWAPI::Races::Terran;
		case TerranControlTower:
			return BWAPI::Races::Terran;
		case TerranScienceFacility:
			return BWAPI::Races::Terran;
		case TerranCovertOps:
			return BWAPI::Races::Terran;
		case TerranPhysicsLab:
			return BWAPI::Races::Terran;
		case TerranMachineShop:
			return BWAPI::Races::Terran;
		case TerranEngineeringBay:
			return BWAPI::Races::Terran;
		case TerranArmory:
			return BWAPI::Races::Terran;
		case ZergInfestedCommandCenter:
			return BWAPI::Races::Zerg;
		case ZergHatchery:
			return BWAPI::Races::Zerg;
		case ZergLair:
			return BWAPI::Races::Zerg;
		case ZergHive:
			return BWAPI::Races::Zerg;
		case ZergHydraliskDen:
			return BWAPI::Races::Zerg;
		case ZergDefilerMound:
			return BWAPI::Races::Zerg;
		case ZergGreaterSpire:
			return BWAPI::Races::Zerg;
		case ZergQueensNest:
			return BWAPI::Races::Zerg;
		case ZergEvolutionChamber:
			return BWAPI::Races::Zerg;
		case ZergUltraliskCavern:
			return BWAPI::Races::Zerg;
		case ZergSpire:
			return BWAPI::Races::Zerg;
		case ZergSpawningPool:
			return BWAPI::Races::Zerg;
		case ProtossNexus:
			return BWAPI::Races::Protoss;
		case ProtossRoboticsFacility:
			return BWAPI::Races::Protoss;
		case ProtossObservatory:
			return BWAPI::Races::Protoss;
		case ProtossGateway:
			return BWAPI::Races::Protoss;
		case ProtossCitadelofAdun:
			return BWAPI::Races::Protoss;
		case ProtossCyberneticsCore:
			return BWAPI::Races::Protoss;
		case ProtossTemplarArchives:
			return BWAPI::Races::Protoss;
		case ProtossForge:
			return BWAPI::Races::Protoss;
		case ProtossStargate:
			return BWAPI::Races::Protoss;
		case ProtossFleetBeacon:
			return BWAPI::Races::Protoss;
		case ProtossArbiterTribunal:
			return BWAPI::Races::Protoss;
		case ProtossRoboticsSupportBay:
			return BWAPI::Races::Protoss;
		case LurkerAspect:
			return BWAPI::Races::Zerg;
		case TerranInfantryArmor:
			return BWAPI::Races::Terran;
		case TerranVehiclePlating:
			return BWAPI::Races::Terran;
		case TerranShipPlating:
			return BWAPI::Races::Terran;
		case ZergCarapace:
			return BWAPI::Races::Zerg;
		case ZergFlyerCarapace:
			return BWAPI::Races::Zerg;
		case ProtossGroundArmor:
			return BWAPI::Races::Protoss;
		case ProtossAirArmor:
			return BWAPI::Races::Protoss;
		case TerranInfantryWeapons:
			return BWAPI::Races::Terran;
		case TerranVehicleWeapons:
			return BWAPI::Races::Terran;
		case TerranShipWeapons:
			return BWAPI::Races::Terran;
		case ZergMeleeAttacks:
			return BWAPI::Races::Zerg;
		case ZergMissileAttacks:
			return BWAPI::Races::Zerg;
		case ZergFlyerAttacks:
			return BWAPI::Races::Zerg;
		case ProtossGroundWeapons:
			return BWAPI::Races::Protoss;
		case ProtossAirWeapons:
			return BWAPI::Races::Protoss;
		case ProtossPlasmaShields:
			return BWAPI::Races::Protoss;
		case U_238Shells:
			return BWAPI::Races::Terran;
		case IonThrusters:
			return BWAPI::Races::Terran;
		case TitanReactor:
			return BWAPI::Races::Terran;
		case OcularImplants:
			return BWAPI::Races::Terran;
		case MoebiusReactor:
			return BWAPI::Races::Terran;
		case ApolloReactor:
			return BWAPI::Races::Terran;
		case ColossusReactor:
			return BWAPI::Races::Terran;
		case VentralSacs:
			return BWAPI::Races::Zerg;
		case Antennae:
			return BWAPI::Races::Zerg;
		case PneumatizedCarapace:
			return BWAPI::Races::Zerg;
		case MetabolicBoost:
			return BWAPI::Races::Zerg;
		case AdrenalGlands:
			return BWAPI::Races::Zerg;
		case MuscularAugments:
			return BWAPI::Races::Zerg;
		case GroovedSpines:
			return BWAPI::Races::Zerg;
		case GameteMeiosis:
			return BWAPI::Races::Zerg;
		case MetasynapticNode:
			return BWAPI::Races::Zerg;
		case SingularityCharge:
			return BWAPI::Races::Protoss;
		case LegEnhancements:
			return BWAPI::Races::Protoss;
		case ScarabDamage:
			return BWAPI::Races::Protoss;
		case ReaverCapacity:
			return BWAPI::Races::Protoss;
		case GraviticDrive:
			return BWAPI::Races::Protoss;
		case SensorArray:
			return BWAPI::Races::Protoss;
		case GraviticBoosters:
			return BWAPI::Races::Protoss;
		case KhaydarinAmulet:
			return BWAPI::Races::Protoss;
		case ApialSensors:
			return BWAPI::Races::Protoss;
		case GraviticThrusters:
			return BWAPI::Races::Protoss;
		case CarrierCapacity:
			return BWAPI::Races::Protoss;
		case KhaydarinCore:
			return BWAPI::Races::Protoss;
		case ArgusJewel:
			return BWAPI::Races::Protoss;
		case ArgusTalisman:
			return BWAPI::Races::Protoss;
		case CaduceusReactor:
			return BWAPI::Races::Terran;
		case ChitinousPlating:
			return BWAPI::Races::Zerg;
		case AnabolicSynthesis:
			return BWAPI::Races::Zerg;
		case CharonBoosters:
			return BWAPI::Races::Terran;
		default:
			return BWAPI::Races::None;
	}
}

BWAPI::UnitType ResourceIndex::associatedUnitType() const
{
	switch(index_)
	{
		case TerranCommandCenter:
			return BWAPI::UnitTypes::Terran_Command_Center;
		case TerranComsatStation:
			return BWAPI::UnitTypes::Terran_Comsat_Station;
		case TerranNuclearSilo:
			return BWAPI::UnitTypes::Terran_Nuclear_Silo;
		case TerranBarracks:
			return BWAPI::UnitTypes::Terran_Barracks;
		case TerranAcademy:
			return BWAPI::UnitTypes::Terran_Academy;
		case TerranFactory:
			return BWAPI::UnitTypes::Terran_Factory;
		case TerranStarport:
			return BWAPI::UnitTypes::Terran_Starport;
		case TerranControlTower:
			return BWAPI::UnitTypes::Terran_Control_Tower;
		case TerranScienceFacility:
			return BWAPI::UnitTypes::Terran_Science_Facility;
		case TerranCovertOps:
			return BWAPI::UnitTypes::Terran_Covert_Ops;
		case TerranPhysicsLab:
			return BWAPI::UnitTypes::Terran_Physics_Lab;
		case TerranMachineShop:
			return BWAPI::UnitTypes::Terran_Machine_Shop;
		case TerranEngineeringBay:
			return BWAPI::UnitTypes::Terran_Engineering_Bay;
		case TerranArmory:
			return BWAPI::UnitTypes::Terran_Armory;
		case ZergInfestedCommandCenter:
			return BWAPI::UnitTypes::Zerg_Infested_Command_Center;
		case ZergHatchery:
			return BWAPI::UnitTypes::Zerg_Hatchery;
		case ZergLair:
			return BWAPI::UnitTypes::Zerg_Lair;
		case ZergHive:
			return BWAPI::UnitTypes::Zerg_Hive;
		case ZergHydraliskDen:
			return BWAPI::UnitTypes::Zerg_Hydralisk_Den;
		case ZergDefilerMound:
			return BWAPI::UnitTypes::Zerg_Defiler_Mound;
		case ZergGreaterSpire:
			return BWAPI::UnitTypes::Zerg_Greater_Spire;
		case ZergQueensNest:
			return BWAPI::UnitTypes::Zerg_Queens_Nest;
		case ZergEvolutionChamber:
			return BWAPI::UnitTypes::Zerg_Evolution_Chamber;
		case ZergUltraliskCavern:
			return BWAPI::UnitTypes::Zerg_Ultralisk_Cavern;
		case ZergSpire:
			return BWAPI::UnitTypes::Zerg_Spire;
		case ZergSpawningPool:
			return BWAPI::UnitTypes::Zerg_Spawning_Pool;
		case ProtossNexus:
			return BWAPI::UnitTypes::Protoss_Nexus;
		case ProtossRoboticsFacility:
			return BWAPI::UnitTypes::Protoss_Robotics_Facility;
		case ProtossObservatory:
			return BWAPI::UnitTypes::Protoss_Observatory;
		case ProtossGateway:
			return BWAPI::UnitTypes::Protoss_Gateway;
		case ProtossCitadelofAdun:
			return BWAPI::UnitTypes::Protoss_Citadel_of_Adun;
		case ProtossCyberneticsCore:
			return BWAPI::UnitTypes::Protoss_Cybernetics_Core;
		case ProtossTemplarArchives:
			return BWAPI::UnitTypes::Protoss_Templar_Archives;
		case ProtossForge:
			return BWAPI::UnitTypes::Protoss_Forge;
		case ProtossStargate:
			return BWAPI::UnitTypes::Protoss_Stargate;
		case ProtossFleetBeacon:
			return BWAPI::UnitTypes::Protoss_Fleet_Beacon;
		case ProtossArbiterTribunal:
			return BWAPI::UnitTypes::Protoss_Arbiter_Tribunal;
		case ProtossRoboticsSupportBay:
			return BWAPI::UnitTypes::Protoss_Robotics_Support_Bay;
		default:
			return BWAPI::UnitTypes::None;
	}
}

BWAPI::TechType ResourceIndex::associatedTechType() const
{
	switch(index_)
	{
		case LurkerAspect:
			return BWAPI::TechTypes::Lurker_Aspect;
		default:
			return BWAPI::TechTypes::None;
	}
}

BWAPI::UpgradeType ResourceIndex::associatedUpgradeType() const
{
	switch(index_)
	{
		case TerranInfantryArmor:
			return BWAPI::UpgradeTypes::Terran_Infantry_Armor;
		case TerranVehiclePlating:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Plating;
		case TerranShipPlating:
			return BWAPI::UpgradeTypes::Terran_Ship_Plating;
		case ZergCarapace:
			return BWAPI::UpgradeTypes::Zerg_Carapace;
		case ZergFlyerCarapace:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Carapace;
		case ProtossGroundArmor:
			return BWAPI::UpgradeTypes::Protoss_Ground_Armor;
		case ProtossAirArmor:
			return BWAPI::UpgradeTypes::Protoss_Air_Armor;
		case TerranInfantryWeapons:
			return BWAPI::UpgradeTypes::Terran_Infantry_Weapons;
		case TerranVehicleWeapons:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Weapons;
		case TerranShipWeapons:
			return BWAPI::UpgradeTypes::Terran_Ship_Weapons;
		case ZergMeleeAttacks:
			return BWAPI::UpgradeTypes::Zerg_Melee_Attacks;
		case ZergMissileAttacks:
			return BWAPI::UpgradeTypes::Zerg_Missile_Attacks;
		case ZergFlyerAttacks:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Attacks;
		case ProtossGroundWeapons:
			return BWAPI::UpgradeTypes::Protoss_Ground_Weapons;
		case ProtossAirWeapons:
			return BWAPI::UpgradeTypes::Protoss_Air_Weapons;
		case ProtossPlasmaShields:
			return BWAPI::UpgradeTypes::Protoss_Plasma_Shields;
		case U_238Shells:
			return BWAPI::UpgradeTypes::U_238_Shells;
		case IonThrusters:
			return BWAPI::UpgradeTypes::Ion_Thrusters;
		case TitanReactor:
			return BWAPI::UpgradeTypes::Titan_Reactor;
		case OcularImplants:
			return BWAPI::UpgradeTypes::Ocular_Implants;
		case MoebiusReactor:
			return BWAPI::UpgradeTypes::Moebius_Reactor;
		case ApolloReactor:
			return BWAPI::UpgradeTypes::Apollo_Reactor;
		case ColossusReactor:
			return BWAPI::UpgradeTypes::Colossus_Reactor;
		case VentralSacs:
			return BWAPI::UpgradeTypes::Ventral_Sacs;
		case Antennae:
			return BWAPI::UpgradeTypes::Antennae;
		case PneumatizedCarapace:
			return BWAPI::UpgradeTypes::Pneumatized_Carapace;
		case MetabolicBoost:
			return BWAPI::UpgradeTypes::Metabolic_Boost;
		case AdrenalGlands:
			return BWAPI::UpgradeTypes::Adrenal_Glands;
		case MuscularAugments:
			return BWAPI::UpgradeTypes::Muscular_Augments;
		case GroovedSpines:
			return BWAPI::UpgradeTypes::Grooved_Spines;
		case GameteMeiosis:
			return BWAPI::UpgradeTypes::Gamete_Meiosis;
		case MetasynapticNode:
			return BWAPI::UpgradeTypes::Metasynaptic_Node;
		case SingularityCharge:
			return BWAPI::UpgradeTypes::Singularity_Charge;
		case LegEnhancements:
			return BWAPI::UpgradeTypes::Leg_Enhancements;
		case ScarabDamage:
			return BWAPI::UpgradeTypes::Scarab_Damage;
		case ReaverCapacity:
			return BWAPI::UpgradeTypes::Reaver_Capacity;
		case GraviticDrive:
			return BWAPI::UpgradeTypes::Gravitic_Drive;
		case SensorArray:
			return BWAPI::UpgradeTypes::Sensor_Array;
		case GraviticBoosters:
			return BWAPI::UpgradeTypes::Gravitic_Boosters;
		case KhaydarinAmulet:
			return BWAPI::UpgradeTypes::Khaydarin_Amulet;
		case ApialSensors:
			return BWAPI::UpgradeTypes::Apial_Sensors;
		case GraviticThrusters:
			return BWAPI::UpgradeTypes::Gravitic_Thrusters;
		case CarrierCapacity:
			return BWAPI::UpgradeTypes::Carrier_Capacity;
		case KhaydarinCore:
			return BWAPI::UpgradeTypes::Khaydarin_Core;
		case ArgusJewel:
			return BWAPI::UpgradeTypes::Argus_Jewel;
		case ArgusTalisman:
			return BWAPI::UpgradeTypes::Argus_Talisman;
		case CaduceusReactor:
			return BWAPI::UpgradeTypes::Caduceus_Reactor;
		case ChitinousPlating:
			return BWAPI::UpgradeTypes::Chitinous_Plating;
		case AnabolicSynthesis:
			return BWAPI::UpgradeTypes::Anabolic_Synthesis;
		case CharonBoosters:
			return BWAPI::UpgradeTypes::Charon_Boosters;
		default:
			return BWAPI::UpgradeTypes::None;
	}
}

int Resources::getGrowth(const ResourceIndex& ri) const
{
	switch(ri.getType())
	{
		case RI::Larva:
			return 1 * amount[RI::ZergHatchery] + 1 * amount[RI::ZergLair] + 1 * amount[RI::ZergHive];
		case RI::Minerals:
			return 45 * amount[RI::TerranWorker] + 45 * amount[RI::ProtossWorker] + 45 * amount[RI::ZergWorker];
		case RI::Gas:
			return 45 * amount[RI::TerranGasWorker] + 45 * amount[RI::ProtossGasWorker] + 45 * amount[RI::ZergGasWorker];
		default:
			return 0;
	}
}

void Resources::advance(int dt)
{
	amount[RI::Larva] += dt * getGrowth(RI::Larva);
	amount[RI::Minerals] += dt * getGrowth(RI::Minerals);
	amount[RI::Gas] += dt * getGrowth(RI::Gas);
	time += dt;
}

void Resources::inc(const ResourceIndex& ri, int optime, int value)
{
	switch(ri.getType())
	{
		case RI::TerranWorker:
			amount[RI::Minerals] -= 45 * (optime - time);
			break;
		case RI::ProtossWorker:
			amount[RI::Minerals] -= 45 * (optime - time);
			break;
		case RI::ZergWorker:
			amount[RI::Minerals] -= 45 * (optime - time);
			break;
		case RI::TerranGasWorker:
			amount[RI::Gas] -= 45 * (optime - time);
			break;
		case RI::ProtossGasWorker:
			amount[RI::Gas] -= 45 * (optime - time);
			break;
		case RI::ZergGasWorker:
			amount[RI::Gas] -= 45 * (optime - time);
			break;
		case RI::ZergHatchery:
			amount[RI::Larva] -= 1 * (optime - time);
			break;
		case RI::ZergLair:
			amount[RI::Larva] -= 1 * (optime - time);
			break;
		case RI::ZergHive:
			amount[RI::Larva] -= 1 * (optime - time);
			break;
		default:
			break;
	}
	amount[ri.getIndex()] += value * ri.getScaling();
}

std::string OperationIndex::getName() const
{
	switch(index_)
	{
		case SendTerranGasWorker:
			return "SendTerranGasWorker";
		case ReturnTerranGasWorker:
			return "ReturnTerranGasWorker";
		case SendProtossGasWorker:
			return "SendProtossGasWorker";
		case ReturnProtossGasWorker:
			return "ReturnProtossGasWorker";
		case SendZergGasWorker:
			return "SendZergGasWorker";
		case ReturnZergGasWorker:
			return "ReturnZergGasWorker";
		case TerranMarine:
			return "TerranMarine";
		case TerranGhost:
			return "TerranGhost";
		case TerranVulture:
			return "TerranVulture";
		case TerranGoliath:
			return "TerranGoliath";
		case TerranSiegeTankTankMode:
			return "TerranSiegeTankTankMode";
		case TerranSCV:
			return "TerranSCV";
		case TerranWraith:
			return "TerranWraith";
		case TerranScienceVessel:
			return "TerranScienceVessel";
		case TerranDropship:
			return "TerranDropship";
		case TerranBattlecruiser:
			return "TerranBattlecruiser";
		case TerranNuclearMissile:
			return "TerranNuclearMissile";
		case TerranFirebat:
			return "TerranFirebat";
		case TerranMedic:
			return "TerranMedic";
		case ZergZergling:
			return "ZergZergling";
		case ZergHydralisk:
			return "ZergHydralisk";
		case ZergUltralisk:
			return "ZergUltralisk";
		case ZergDrone:
			return "ZergDrone";
		case ZergOverlord:
			return "ZergOverlord";
		case ZergMutalisk:
			return "ZergMutalisk";
		case ZergGuardian:
			return "ZergGuardian";
		case ZergQueen:
			return "ZergQueen";
		case ZergDefiler:
			return "ZergDefiler";
		case ZergScourge:
			return "ZergScourge";
		case ZergInfestedTerran:
			return "ZergInfestedTerran";
		case TerranValkyrie:
			return "TerranValkyrie";
		case ProtossCorsair:
			return "ProtossCorsair";
		case ProtossDarkTemplar:
			return "ProtossDarkTemplar";
		case ZergDevourer:
			return "ZergDevourer";
		case ProtossProbe:
			return "ProtossProbe";
		case ProtossZealot:
			return "ProtossZealot";
		case ProtossDragoon:
			return "ProtossDragoon";
		case ProtossHighTemplar:
			return "ProtossHighTemplar";
		case ProtossShuttle:
			return "ProtossShuttle";
		case ProtossScout:
			return "ProtossScout";
		case ProtossArbiter:
			return "ProtossArbiter";
		case ProtossCarrier:
			return "ProtossCarrier";
		case ProtossReaver:
			return "ProtossReaver";
		case ProtossObserver:
			return "ProtossObserver";
		case ZergLurker:
			return "ZergLurker";
		case TerranCommandCenter:
			return "TerranCommandCenter";
		case TerranComsatStation:
			return "TerranComsatStation";
		case TerranNuclearSilo:
			return "TerranNuclearSilo";
		case TerranSupplyDepot:
			return "TerranSupplyDepot";
		case TerranRefinery:
			return "TerranRefinery";
		case TerranBarracks:
			return "TerranBarracks";
		case TerranAcademy:
			return "TerranAcademy";
		case TerranFactory:
			return "TerranFactory";
		case TerranStarport:
			return "TerranStarport";
		case TerranControlTower:
			return "TerranControlTower";
		case TerranScienceFacility:
			return "TerranScienceFacility";
		case TerranCovertOps:
			return "TerranCovertOps";
		case TerranPhysicsLab:
			return "TerranPhysicsLab";
		case TerranMachineShop:
			return "TerranMachineShop";
		case TerranEngineeringBay:
			return "TerranEngineeringBay";
		case TerranArmory:
			return "TerranArmory";
		case TerranMissileTurret:
			return "TerranMissileTurret";
		case TerranBunker:
			return "TerranBunker";
		case ZergHatchery:
			return "ZergHatchery";
		case ZergLair:
			return "ZergLair";
		case ZergHive:
			return "ZergHive";
		case ZergNydusCanal:
			return "ZergNydusCanal";
		case ZergHydraliskDen:
			return "ZergHydraliskDen";
		case ZergDefilerMound:
			return "ZergDefilerMound";
		case ZergGreaterSpire:
			return "ZergGreaterSpire";
		case ZergQueensNest:
			return "ZergQueensNest";
		case ZergEvolutionChamber:
			return "ZergEvolutionChamber";
		case ZergUltraliskCavern:
			return "ZergUltraliskCavern";
		case ZergSpire:
			return "ZergSpire";
		case ZergSpawningPool:
			return "ZergSpawningPool";
		case ZergCreepColony:
			return "ZergCreepColony";
		case ZergSporeColony:
			return "ZergSporeColony";
		case ZergSunkenColony:
			return "ZergSunkenColony";
		case ZergExtractor:
			return "ZergExtractor";
		case ProtossNexus:
			return "ProtossNexus";
		case ProtossRoboticsFacility:
			return "ProtossRoboticsFacility";
		case ProtossPylon:
			return "ProtossPylon";
		case ProtossAssimilator:
			return "ProtossAssimilator";
		case ProtossObservatory:
			return "ProtossObservatory";
		case ProtossGateway:
			return "ProtossGateway";
		case ProtossPhotonCannon:
			return "ProtossPhotonCannon";
		case ProtossCitadelofAdun:
			return "ProtossCitadelofAdun";
		case ProtossCyberneticsCore:
			return "ProtossCyberneticsCore";
		case ProtossTemplarArchives:
			return "ProtossTemplarArchives";
		case ProtossForge:
			return "ProtossForge";
		case ProtossStargate:
			return "ProtossStargate";
		case ProtossFleetBeacon:
			return "ProtossFleetBeacon";
		case ProtossArbiterTribunal:
			return "ProtossArbiterTribunal";
		case ProtossRoboticsSupportBay:
			return "ProtossRoboticsSupportBay";
		case ProtossShieldBattery:
			return "ProtossShieldBattery";
		case StimPacks:
			return "StimPacks";
		case Lockdown:
			return "Lockdown";
		case EMPShockwave:
			return "EMPShockwave";
		case SpiderMines:
			return "SpiderMines";
		case TankSiegeMode:
			return "TankSiegeMode";
		case Irradiate:
			return "Irradiate";
		case YamatoGun:
			return "YamatoGun";
		case CloakingField:
			return "CloakingField";
		case PersonnelCloaking:
			return "PersonnelCloaking";
		case Burrowing:
			return "Burrowing";
		case SpawnBroodlings:
			return "SpawnBroodlings";
		case Plague:
			return "Plague";
		case Consume:
			return "Consume";
		case Ensnare:
			return "Ensnare";
		case PsionicStorm:
			return "PsionicStorm";
		case Hallucination:
			return "Hallucination";
		case Recall:
			return "Recall";
		case StasisField:
			return "StasisField";
		case Restoration:
			return "Restoration";
		case DisruptionWeb:
			return "DisruptionWeb";
		case MindControl:
			return "MindControl";
		case OpticalFlare:
			return "OpticalFlare";
		case Maelstrom:
			return "Maelstrom";
		case LurkerAspect:
			return "LurkerAspect";
		case TerranInfantryArmor1:
			return "TerranInfantryArmor1";
		case TerranInfantryArmor2:
			return "TerranInfantryArmor2";
		case TerranInfantryArmor3:
			return "TerranInfantryArmor3";
		case TerranVehiclePlating1:
			return "TerranVehiclePlating1";
		case TerranVehiclePlating2:
			return "TerranVehiclePlating2";
		case TerranVehiclePlating3:
			return "TerranVehiclePlating3";
		case TerranShipPlating1:
			return "TerranShipPlating1";
		case TerranShipPlating2:
			return "TerranShipPlating2";
		case TerranShipPlating3:
			return "TerranShipPlating3";
		case ZergCarapace1:
			return "ZergCarapace1";
		case ZergCarapace2:
			return "ZergCarapace2";
		case ZergCarapace3:
			return "ZergCarapace3";
		case ZergFlyerCarapace1:
			return "ZergFlyerCarapace1";
		case ZergFlyerCarapace2:
			return "ZergFlyerCarapace2";
		case ZergFlyerCarapace3:
			return "ZergFlyerCarapace3";
		case ProtossGroundArmor1:
			return "ProtossGroundArmor1";
		case ProtossGroundArmor2:
			return "ProtossGroundArmor2";
		case ProtossGroundArmor3:
			return "ProtossGroundArmor3";
		case ProtossAirArmor1:
			return "ProtossAirArmor1";
		case ProtossAirArmor2:
			return "ProtossAirArmor2";
		case ProtossAirArmor3:
			return "ProtossAirArmor3";
		case TerranInfantryWeapons1:
			return "TerranInfantryWeapons1";
		case TerranInfantryWeapons2:
			return "TerranInfantryWeapons2";
		case TerranInfantryWeapons3:
			return "TerranInfantryWeapons3";
		case TerranVehicleWeapons1:
			return "TerranVehicleWeapons1";
		case TerranVehicleWeapons2:
			return "TerranVehicleWeapons2";
		case TerranVehicleWeapons3:
			return "TerranVehicleWeapons3";
		case TerranShipWeapons1:
			return "TerranShipWeapons1";
		case TerranShipWeapons2:
			return "TerranShipWeapons2";
		case TerranShipWeapons3:
			return "TerranShipWeapons3";
		case ZergMeleeAttacks1:
			return "ZergMeleeAttacks1";
		case ZergMeleeAttacks2:
			return "ZergMeleeAttacks2";
		case ZergMeleeAttacks3:
			return "ZergMeleeAttacks3";
		case ZergMissileAttacks1:
			return "ZergMissileAttacks1";
		case ZergMissileAttacks2:
			return "ZergMissileAttacks2";
		case ZergMissileAttacks3:
			return "ZergMissileAttacks3";
		case ZergFlyerAttacks1:
			return "ZergFlyerAttacks1";
		case ZergFlyerAttacks2:
			return "ZergFlyerAttacks2";
		case ZergFlyerAttacks3:
			return "ZergFlyerAttacks3";
		case ProtossGroundWeapons1:
			return "ProtossGroundWeapons1";
		case ProtossGroundWeapons2:
			return "ProtossGroundWeapons2";
		case ProtossGroundWeapons3:
			return "ProtossGroundWeapons3";
		case ProtossAirWeapons1:
			return "ProtossAirWeapons1";
		case ProtossAirWeapons2:
			return "ProtossAirWeapons2";
		case ProtossAirWeapons3:
			return "ProtossAirWeapons3";
		case ProtossPlasmaShields1:
			return "ProtossPlasmaShields1";
		case ProtossPlasmaShields2:
			return "ProtossPlasmaShields2";
		case ProtossPlasmaShields3:
			return "ProtossPlasmaShields3";
		case U_238Shells1:
			return "U_238Shells1";
		case IonThrusters1:
			return "IonThrusters1";
		case TitanReactor1:
			return "TitanReactor1";
		case OcularImplants1:
			return "OcularImplants1";
		case MoebiusReactor1:
			return "MoebiusReactor1";
		case ApolloReactor1:
			return "ApolloReactor1";
		case ColossusReactor1:
			return "ColossusReactor1";
		case VentralSacs1:
			return "VentralSacs1";
		case Antennae1:
			return "Antennae1";
		case PneumatizedCarapace1:
			return "PneumatizedCarapace1";
		case MetabolicBoost1:
			return "MetabolicBoost1";
		case AdrenalGlands1:
			return "AdrenalGlands1";
		case MuscularAugments1:
			return "MuscularAugments1";
		case GroovedSpines1:
			return "GroovedSpines1";
		case GameteMeiosis1:
			return "GameteMeiosis1";
		case MetasynapticNode1:
			return "MetasynapticNode1";
		case SingularityCharge1:
			return "SingularityCharge1";
		case LegEnhancements1:
			return "LegEnhancements1";
		case ScarabDamage1:
			return "ScarabDamage1";
		case ReaverCapacity1:
			return "ReaverCapacity1";
		case GraviticDrive1:
			return "GraviticDrive1";
		case SensorArray1:
			return "SensorArray1";
		case GraviticBoosters1:
			return "GraviticBoosters1";
		case KhaydarinAmulet1:
			return "KhaydarinAmulet1";
		case ApialSensors1:
			return "ApialSensors1";
		case GraviticThrusters1:
			return "GraviticThrusters1";
		case CarrierCapacity1:
			return "CarrierCapacity1";
		case KhaydarinCore1:
			return "KhaydarinCore1";
		case ArgusJewel1:
			return "ArgusJewel1";
		case ArgusTalisman1:
			return "ArgusTalisman1";
		case CaduceusReactor1:
			return "CaduceusReactor1";
		case ChitinousPlating1:
			return "ChitinousPlating1";
		case AnabolicSynthesis1:
			return "AnabolicSynthesis1";
		case CharonBoosters1:
			return "CharonBoosters1";
		default:
			return "[UNKNOWN]";
	}
}

BWAPI::Race OperationIndex::associatedRace() const
{
	switch(index_)
	{
		case SendTerranGasWorker:
			return BWAPI::Races::Terran;
		case ReturnTerranGasWorker:
			return BWAPI::Races::Terran;
		case SendProtossGasWorker:
			return BWAPI::Races::Protoss;
		case ReturnProtossGasWorker:
			return BWAPI::Races::Protoss;
		case SendZergGasWorker:
			return BWAPI::Races::Zerg;
		case ReturnZergGasWorker:
			return BWAPI::Races::Zerg;
		case TerranMarine:
			return BWAPI::Races::Terran;
		case TerranGhost:
			return BWAPI::Races::Terran;
		case TerranVulture:
			return BWAPI::Races::Terran;
		case TerranGoliath:
			return BWAPI::Races::Terran;
		case TerranSiegeTankTankMode:
			return BWAPI::Races::Terran;
		case TerranSCV:
			return BWAPI::Races::Terran;
		case TerranWraith:
			return BWAPI::Races::Terran;
		case TerranScienceVessel:
			return BWAPI::Races::Terran;
		case TerranDropship:
			return BWAPI::Races::Terran;
		case TerranBattlecruiser:
			return BWAPI::Races::Terran;
		case TerranNuclearMissile:
			return BWAPI::Races::Terran;
		case TerranFirebat:
			return BWAPI::Races::Terran;
		case TerranMedic:
			return BWAPI::Races::Terran;
		case ZergZergling:
			return BWAPI::Races::Zerg;
		case ZergHydralisk:
			return BWAPI::Races::Zerg;
		case ZergUltralisk:
			return BWAPI::Races::Zerg;
		case ZergDrone:
			return BWAPI::Races::Zerg;
		case ZergOverlord:
			return BWAPI::Races::Zerg;
		case ZergMutalisk:
			return BWAPI::Races::Zerg;
		case ZergGuardian:
			return BWAPI::Races::Zerg;
		case ZergQueen:
			return BWAPI::Races::Zerg;
		case ZergDefiler:
			return BWAPI::Races::Zerg;
		case ZergScourge:
			return BWAPI::Races::Zerg;
		case ZergInfestedTerran:
			return BWAPI::Races::Zerg;
		case TerranValkyrie:
			return BWAPI::Races::Terran;
		case ProtossCorsair:
			return BWAPI::Races::Protoss;
		case ProtossDarkTemplar:
			return BWAPI::Races::Protoss;
		case ZergDevourer:
			return BWAPI::Races::Zerg;
		case ProtossProbe:
			return BWAPI::Races::Protoss;
		case ProtossZealot:
			return BWAPI::Races::Protoss;
		case ProtossDragoon:
			return BWAPI::Races::Protoss;
		case ProtossHighTemplar:
			return BWAPI::Races::Protoss;
		case ProtossShuttle:
			return BWAPI::Races::Protoss;
		case ProtossScout:
			return BWAPI::Races::Protoss;
		case ProtossArbiter:
			return BWAPI::Races::Protoss;
		case ProtossCarrier:
			return BWAPI::Races::Protoss;
		case ProtossReaver:
			return BWAPI::Races::Protoss;
		case ProtossObserver:
			return BWAPI::Races::Protoss;
		case ZergLurker:
			return BWAPI::Races::Zerg;
		case TerranCommandCenter:
			return BWAPI::Races::Terran;
		case TerranComsatStation:
			return BWAPI::Races::Terran;
		case TerranNuclearSilo:
			return BWAPI::Races::Terran;
		case TerranSupplyDepot:
			return BWAPI::Races::Terran;
		case TerranRefinery:
			return BWAPI::Races::Terran;
		case TerranBarracks:
			return BWAPI::Races::Terran;
		case TerranAcademy:
			return BWAPI::Races::Terran;
		case TerranFactory:
			return BWAPI::Races::Terran;
		case TerranStarport:
			return BWAPI::Races::Terran;
		case TerranControlTower:
			return BWAPI::Races::Terran;
		case TerranScienceFacility:
			return BWAPI::Races::Terran;
		case TerranCovertOps:
			return BWAPI::Races::Terran;
		case TerranPhysicsLab:
			return BWAPI::Races::Terran;
		case TerranMachineShop:
			return BWAPI::Races::Terran;
		case TerranEngineeringBay:
			return BWAPI::Races::Terran;
		case TerranArmory:
			return BWAPI::Races::Terran;
		case TerranMissileTurret:
			return BWAPI::Races::Terran;
		case TerranBunker:
			return BWAPI::Races::Terran;
		case ZergHatchery:
			return BWAPI::Races::Zerg;
		case ZergLair:
			return BWAPI::Races::Zerg;
		case ZergHive:
			return BWAPI::Races::Zerg;
		case ZergNydusCanal:
			return BWAPI::Races::Zerg;
		case ZergHydraliskDen:
			return BWAPI::Races::Zerg;
		case ZergDefilerMound:
			return BWAPI::Races::Zerg;
		case ZergGreaterSpire:
			return BWAPI::Races::Zerg;
		case ZergQueensNest:
			return BWAPI::Races::Zerg;
		case ZergEvolutionChamber:
			return BWAPI::Races::Zerg;
		case ZergUltraliskCavern:
			return BWAPI::Races::Zerg;
		case ZergSpire:
			return BWAPI::Races::Zerg;
		case ZergSpawningPool:
			return BWAPI::Races::Zerg;
		case ZergCreepColony:
			return BWAPI::Races::Zerg;
		case ZergSporeColony:
			return BWAPI::Races::Zerg;
		case ZergSunkenColony:
			return BWAPI::Races::Zerg;
		case ZergExtractor:
			return BWAPI::Races::Zerg;
		case ProtossNexus:
			return BWAPI::Races::Protoss;
		case ProtossRoboticsFacility:
			return BWAPI::Races::Protoss;
		case ProtossPylon:
			return BWAPI::Races::Protoss;
		case ProtossAssimilator:
			return BWAPI::Races::Protoss;
		case ProtossObservatory:
			return BWAPI::Races::Protoss;
		case ProtossGateway:
			return BWAPI::Races::Protoss;
		case ProtossPhotonCannon:
			return BWAPI::Races::Protoss;
		case ProtossCitadelofAdun:
			return BWAPI::Races::Protoss;
		case ProtossCyberneticsCore:
			return BWAPI::Races::Protoss;
		case ProtossTemplarArchives:
			return BWAPI::Races::Protoss;
		case ProtossForge:
			return BWAPI::Races::Protoss;
		case ProtossStargate:
			return BWAPI::Races::Protoss;
		case ProtossFleetBeacon:
			return BWAPI::Races::Protoss;
		case ProtossArbiterTribunal:
			return BWAPI::Races::Protoss;
		case ProtossRoboticsSupportBay:
			return BWAPI::Races::Protoss;
		case ProtossShieldBattery:
			return BWAPI::Races::Protoss;
		case StimPacks:
			return BWAPI::Races::Terran;
		case Lockdown:
			return BWAPI::Races::Terran;
		case EMPShockwave:
			return BWAPI::Races::Terran;
		case SpiderMines:
			return BWAPI::Races::Terran;
		case TankSiegeMode:
			return BWAPI::Races::Terran;
		case Irradiate:
			return BWAPI::Races::Terran;
		case YamatoGun:
			return BWAPI::Races::Terran;
		case CloakingField:
			return BWAPI::Races::Terran;
		case PersonnelCloaking:
			return BWAPI::Races::Terran;
		case Burrowing:
			return BWAPI::Races::Zerg;
		case SpawnBroodlings:
			return BWAPI::Races::Zerg;
		case Plague:
			return BWAPI::Races::Zerg;
		case Consume:
			return BWAPI::Races::Zerg;
		case Ensnare:
			return BWAPI::Races::Zerg;
		case PsionicStorm:
			return BWAPI::Races::Protoss;
		case Hallucination:
			return BWAPI::Races::Protoss;
		case Recall:
			return BWAPI::Races::Protoss;
		case StasisField:
			return BWAPI::Races::Protoss;
		case Restoration:
			return BWAPI::Races::Terran;
		case DisruptionWeb:
			return BWAPI::Races::Protoss;
		case MindControl:
			return BWAPI::Races::Protoss;
		case OpticalFlare:
			return BWAPI::Races::Terran;
		case Maelstrom:
			return BWAPI::Races::Protoss;
		case LurkerAspect:
			return BWAPI::Races::Zerg;
		case TerranInfantryArmor1:
			return BWAPI::Races::Terran;
		case TerranInfantryArmor2:
			return BWAPI::Races::Terran;
		case TerranInfantryArmor3:
			return BWAPI::Races::Terran;
		case TerranVehiclePlating1:
			return BWAPI::Races::Terran;
		case TerranVehiclePlating2:
			return BWAPI::Races::Terran;
		case TerranVehiclePlating3:
			return BWAPI::Races::Terran;
		case TerranShipPlating1:
			return BWAPI::Races::Terran;
		case TerranShipPlating2:
			return BWAPI::Races::Terran;
		case TerranShipPlating3:
			return BWAPI::Races::Terran;
		case ZergCarapace1:
			return BWAPI::Races::Zerg;
		case ZergCarapace2:
			return BWAPI::Races::Zerg;
		case ZergCarapace3:
			return BWAPI::Races::Zerg;
		case ZergFlyerCarapace1:
			return BWAPI::Races::Zerg;
		case ZergFlyerCarapace2:
			return BWAPI::Races::Zerg;
		case ZergFlyerCarapace3:
			return BWAPI::Races::Zerg;
		case ProtossGroundArmor1:
			return BWAPI::Races::Protoss;
		case ProtossGroundArmor2:
			return BWAPI::Races::Protoss;
		case ProtossGroundArmor3:
			return BWAPI::Races::Protoss;
		case ProtossAirArmor1:
			return BWAPI::Races::Protoss;
		case ProtossAirArmor2:
			return BWAPI::Races::Protoss;
		case ProtossAirArmor3:
			return BWAPI::Races::Protoss;
		case TerranInfantryWeapons1:
			return BWAPI::Races::Terran;
		case TerranInfantryWeapons2:
			return BWAPI::Races::Terran;
		case TerranInfantryWeapons3:
			return BWAPI::Races::Terran;
		case TerranVehicleWeapons1:
			return BWAPI::Races::Terran;
		case TerranVehicleWeapons2:
			return BWAPI::Races::Terran;
		case TerranVehicleWeapons3:
			return BWAPI::Races::Terran;
		case TerranShipWeapons1:
			return BWAPI::Races::Terran;
		case TerranShipWeapons2:
			return BWAPI::Races::Terran;
		case TerranShipWeapons3:
			return BWAPI::Races::Terran;
		case ZergMeleeAttacks1:
			return BWAPI::Races::Zerg;
		case ZergMeleeAttacks2:
			return BWAPI::Races::Zerg;
		case ZergMeleeAttacks3:
			return BWAPI::Races::Zerg;
		case ZergMissileAttacks1:
			return BWAPI::Races::Zerg;
		case ZergMissileAttacks2:
			return BWAPI::Races::Zerg;
		case ZergMissileAttacks3:
			return BWAPI::Races::Zerg;
		case ZergFlyerAttacks1:
			return BWAPI::Races::Zerg;
		case ZergFlyerAttacks2:
			return BWAPI::Races::Zerg;
		case ZergFlyerAttacks3:
			return BWAPI::Races::Zerg;
		case ProtossGroundWeapons1:
			return BWAPI::Races::Protoss;
		case ProtossGroundWeapons2:
			return BWAPI::Races::Protoss;
		case ProtossGroundWeapons3:
			return BWAPI::Races::Protoss;
		case ProtossAirWeapons1:
			return BWAPI::Races::Protoss;
		case ProtossAirWeapons2:
			return BWAPI::Races::Protoss;
		case ProtossAirWeapons3:
			return BWAPI::Races::Protoss;
		case ProtossPlasmaShields1:
			return BWAPI::Races::Protoss;
		case ProtossPlasmaShields2:
			return BWAPI::Races::Protoss;
		case ProtossPlasmaShields3:
			return BWAPI::Races::Protoss;
		case U_238Shells1:
			return BWAPI::Races::Terran;
		case IonThrusters1:
			return BWAPI::Races::Terran;
		case TitanReactor1:
			return BWAPI::Races::Terran;
		case OcularImplants1:
			return BWAPI::Races::Terran;
		case MoebiusReactor1:
			return BWAPI::Races::Terran;
		case ApolloReactor1:
			return BWAPI::Races::Terran;
		case ColossusReactor1:
			return BWAPI::Races::Terran;
		case VentralSacs1:
			return BWAPI::Races::Zerg;
		case Antennae1:
			return BWAPI::Races::Zerg;
		case PneumatizedCarapace1:
			return BWAPI::Races::Zerg;
		case MetabolicBoost1:
			return BWAPI::Races::Zerg;
		case AdrenalGlands1:
			return BWAPI::Races::Zerg;
		case MuscularAugments1:
			return BWAPI::Races::Zerg;
		case GroovedSpines1:
			return BWAPI::Races::Zerg;
		case GameteMeiosis1:
			return BWAPI::Races::Zerg;
		case MetasynapticNode1:
			return BWAPI::Races::Zerg;
		case SingularityCharge1:
			return BWAPI::Races::Protoss;
		case LegEnhancements1:
			return BWAPI::Races::Protoss;
		case ScarabDamage1:
			return BWAPI::Races::Protoss;
		case ReaverCapacity1:
			return BWAPI::Races::Protoss;
		case GraviticDrive1:
			return BWAPI::Races::Protoss;
		case SensorArray1:
			return BWAPI::Races::Protoss;
		case GraviticBoosters1:
			return BWAPI::Races::Protoss;
		case KhaydarinAmulet1:
			return BWAPI::Races::Protoss;
		case ApialSensors1:
			return BWAPI::Races::Protoss;
		case GraviticThrusters1:
			return BWAPI::Races::Protoss;
		case CarrierCapacity1:
			return BWAPI::Races::Protoss;
		case KhaydarinCore1:
			return BWAPI::Races::Protoss;
		case ArgusJewel1:
			return BWAPI::Races::Protoss;
		case ArgusTalisman1:
			return BWAPI::Races::Protoss;
		case CaduceusReactor1:
			return BWAPI::Races::Terran;
		case ChitinousPlating1:
			return BWAPI::Races::Zerg;
		case AnabolicSynthesis1:
			return BWAPI::Races::Zerg;
		case CharonBoosters1:
			return BWAPI::Races::Terran;
		default:
			return BWAPI::Races::None;
	}
}

BWAPI::UnitType OperationIndex::associatedUnitType() const
{
	switch(index_)
	{
		case TerranMarine:
			return BWAPI::UnitTypes::Terran_Marine;
		case TerranGhost:
			return BWAPI::UnitTypes::Terran_Ghost;
		case TerranVulture:
			return BWAPI::UnitTypes::Terran_Vulture;
		case TerranGoliath:
			return BWAPI::UnitTypes::Terran_Goliath;
		case TerranSiegeTankTankMode:
			return BWAPI::UnitTypes::Terran_Siege_Tank_Tank_Mode;
		case TerranSCV:
			return BWAPI::UnitTypes::Terran_SCV;
		case TerranWraith:
			return BWAPI::UnitTypes::Terran_Wraith;
		case TerranScienceVessel:
			return BWAPI::UnitTypes::Terran_Science_Vessel;
		case TerranDropship:
			return BWAPI::UnitTypes::Terran_Dropship;
		case TerranBattlecruiser:
			return BWAPI::UnitTypes::Terran_Battlecruiser;
		case TerranNuclearMissile:
			return BWAPI::UnitTypes::Terran_Nuclear_Missile;
		case TerranFirebat:
			return BWAPI::UnitTypes::Terran_Firebat;
		case TerranMedic:
			return BWAPI::UnitTypes::Terran_Medic;
		case ZergZergling:
			return BWAPI::UnitTypes::Zerg_Zergling;
		case ZergHydralisk:
			return BWAPI::UnitTypes::Zerg_Hydralisk;
		case ZergUltralisk:
			return BWAPI::UnitTypes::Zerg_Ultralisk;
		case ZergDrone:
			return BWAPI::UnitTypes::Zerg_Drone;
		case ZergOverlord:
			return BWAPI::UnitTypes::Zerg_Overlord;
		case ZergMutalisk:
			return BWAPI::UnitTypes::Zerg_Mutalisk;
		case ZergGuardian:
			return BWAPI::UnitTypes::Zerg_Guardian;
		case ZergQueen:
			return BWAPI::UnitTypes::Zerg_Queen;
		case ZergDefiler:
			return BWAPI::UnitTypes::Zerg_Defiler;
		case ZergScourge:
			return BWAPI::UnitTypes::Zerg_Scourge;
		case ZergInfestedTerran:
			return BWAPI::UnitTypes::Zerg_Infested_Terran;
		case TerranValkyrie:
			return BWAPI::UnitTypes::Terran_Valkyrie;
		case ProtossCorsair:
			return BWAPI::UnitTypes::Protoss_Corsair;
		case ProtossDarkTemplar:
			return BWAPI::UnitTypes::Protoss_Dark_Templar;
		case ZergDevourer:
			return BWAPI::UnitTypes::Zerg_Devourer;
		case ProtossProbe:
			return BWAPI::UnitTypes::Protoss_Probe;
		case ProtossZealot:
			return BWAPI::UnitTypes::Protoss_Zealot;
		case ProtossDragoon:
			return BWAPI::UnitTypes::Protoss_Dragoon;
		case ProtossHighTemplar:
			return BWAPI::UnitTypes::Protoss_High_Templar;
		case ProtossShuttle:
			return BWAPI::UnitTypes::Protoss_Shuttle;
		case ProtossScout:
			return BWAPI::UnitTypes::Protoss_Scout;
		case ProtossArbiter:
			return BWAPI::UnitTypes::Protoss_Arbiter;
		case ProtossCarrier:
			return BWAPI::UnitTypes::Protoss_Carrier;
		case ProtossReaver:
			return BWAPI::UnitTypes::Protoss_Reaver;
		case ProtossObserver:
			return BWAPI::UnitTypes::Protoss_Observer;
		case ZergLurker:
			return BWAPI::UnitTypes::Zerg_Lurker;
		case TerranCommandCenter:
			return BWAPI::UnitTypes::Terran_Command_Center;
		case TerranComsatStation:
			return BWAPI::UnitTypes::Terran_Comsat_Station;
		case TerranNuclearSilo:
			return BWAPI::UnitTypes::Terran_Nuclear_Silo;
		case TerranSupplyDepot:
			return BWAPI::UnitTypes::Terran_Supply_Depot;
		case TerranRefinery:
			return BWAPI::UnitTypes::Terran_Refinery;
		case TerranBarracks:
			return BWAPI::UnitTypes::Terran_Barracks;
		case TerranAcademy:
			return BWAPI::UnitTypes::Terran_Academy;
		case TerranFactory:
			return BWAPI::UnitTypes::Terran_Factory;
		case TerranStarport:
			return BWAPI::UnitTypes::Terran_Starport;
		case TerranControlTower:
			return BWAPI::UnitTypes::Terran_Control_Tower;
		case TerranScienceFacility:
			return BWAPI::UnitTypes::Terran_Science_Facility;
		case TerranCovertOps:
			return BWAPI::UnitTypes::Terran_Covert_Ops;
		case TerranPhysicsLab:
			return BWAPI::UnitTypes::Terran_Physics_Lab;
		case TerranMachineShop:
			return BWAPI::UnitTypes::Terran_Machine_Shop;
		case TerranEngineeringBay:
			return BWAPI::UnitTypes::Terran_Engineering_Bay;
		case TerranArmory:
			return BWAPI::UnitTypes::Terran_Armory;
		case TerranMissileTurret:
			return BWAPI::UnitTypes::Terran_Missile_Turret;
		case TerranBunker:
			return BWAPI::UnitTypes::Terran_Bunker;
		case ZergHatchery:
			return BWAPI::UnitTypes::Zerg_Hatchery;
		case ZergLair:
			return BWAPI::UnitTypes::Zerg_Lair;
		case ZergHive:
			return BWAPI::UnitTypes::Zerg_Hive;
		case ZergNydusCanal:
			return BWAPI::UnitTypes::Zerg_Nydus_Canal;
		case ZergHydraliskDen:
			return BWAPI::UnitTypes::Zerg_Hydralisk_Den;
		case ZergDefilerMound:
			return BWAPI::UnitTypes::Zerg_Defiler_Mound;
		case ZergGreaterSpire:
			return BWAPI::UnitTypes::Zerg_Greater_Spire;
		case ZergQueensNest:
			return BWAPI::UnitTypes::Zerg_Queens_Nest;
		case ZergEvolutionChamber:
			return BWAPI::UnitTypes::Zerg_Evolution_Chamber;
		case ZergUltraliskCavern:
			return BWAPI::UnitTypes::Zerg_Ultralisk_Cavern;
		case ZergSpire:
			return BWAPI::UnitTypes::Zerg_Spire;
		case ZergSpawningPool:
			return BWAPI::UnitTypes::Zerg_Spawning_Pool;
		case ZergCreepColony:
			return BWAPI::UnitTypes::Zerg_Creep_Colony;
		case ZergSporeColony:
			return BWAPI::UnitTypes::Zerg_Spore_Colony;
		case ZergSunkenColony:
			return BWAPI::UnitTypes::Zerg_Sunken_Colony;
		case ZergExtractor:
			return BWAPI::UnitTypes::Zerg_Extractor;
		case ProtossNexus:
			return BWAPI::UnitTypes::Protoss_Nexus;
		case ProtossRoboticsFacility:
			return BWAPI::UnitTypes::Protoss_Robotics_Facility;
		case ProtossPylon:
			return BWAPI::UnitTypes::Protoss_Pylon;
		case ProtossAssimilator:
			return BWAPI::UnitTypes::Protoss_Assimilator;
		case ProtossObservatory:
			return BWAPI::UnitTypes::Protoss_Observatory;
		case ProtossGateway:
			return BWAPI::UnitTypes::Protoss_Gateway;
		case ProtossPhotonCannon:
			return BWAPI::UnitTypes::Protoss_Photon_Cannon;
		case ProtossCitadelofAdun:
			return BWAPI::UnitTypes::Protoss_Citadel_of_Adun;
		case ProtossCyberneticsCore:
			return BWAPI::UnitTypes::Protoss_Cybernetics_Core;
		case ProtossTemplarArchives:
			return BWAPI::UnitTypes::Protoss_Templar_Archives;
		case ProtossForge:
			return BWAPI::UnitTypes::Protoss_Forge;
		case ProtossStargate:
			return BWAPI::UnitTypes::Protoss_Stargate;
		case ProtossFleetBeacon:
			return BWAPI::UnitTypes::Protoss_Fleet_Beacon;
		case ProtossArbiterTribunal:
			return BWAPI::UnitTypes::Protoss_Arbiter_Tribunal;
		case ProtossRoboticsSupportBay:
			return BWAPI::UnitTypes::Protoss_Robotics_Support_Bay;
		case ProtossShieldBattery:
			return BWAPI::UnitTypes::Protoss_Shield_Battery;
		default:
			return BWAPI::UnitTypes::None;
	}
}

BWAPI::TechType OperationIndex::associatedTechType() const
{
	switch(index_)
	{
		case StimPacks:
			return BWAPI::TechTypes::Stim_Packs;
		case Lockdown:
			return BWAPI::TechTypes::Lockdown;
		case EMPShockwave:
			return BWAPI::TechTypes::EMP_Shockwave;
		case SpiderMines:
			return BWAPI::TechTypes::Spider_Mines;
		case TankSiegeMode:
			return BWAPI::TechTypes::Tank_Siege_Mode;
		case Irradiate:
			return BWAPI::TechTypes::Irradiate;
		case YamatoGun:
			return BWAPI::TechTypes::Yamato_Gun;
		case CloakingField:
			return BWAPI::TechTypes::Cloaking_Field;
		case PersonnelCloaking:
			return BWAPI::TechTypes::Personnel_Cloaking;
		case Burrowing:
			return BWAPI::TechTypes::Burrowing;
		case SpawnBroodlings:
			return BWAPI::TechTypes::Spawn_Broodlings;
		case Plague:
			return BWAPI::TechTypes::Plague;
		case Consume:
			return BWAPI::TechTypes::Consume;
		case Ensnare:
			return BWAPI::TechTypes::Ensnare;
		case PsionicStorm:
			return BWAPI::TechTypes::Psionic_Storm;
		case Hallucination:
			return BWAPI::TechTypes::Hallucination;
		case Recall:
			return BWAPI::TechTypes::Recall;
		case StasisField:
			return BWAPI::TechTypes::Stasis_Field;
		case Restoration:
			return BWAPI::TechTypes::Restoration;
		case DisruptionWeb:
			return BWAPI::TechTypes::Disruption_Web;
		case MindControl:
			return BWAPI::TechTypes::Mind_Control;
		case OpticalFlare:
			return BWAPI::TechTypes::Optical_Flare;
		case Maelstrom:
			return BWAPI::TechTypes::Maelstrom;
		case LurkerAspect:
			return BWAPI::TechTypes::Lurker_Aspect;
		default:
			return BWAPI::TechTypes::None;
	}
}

BWAPI::UpgradeType OperationIndex::associatedUpgradeType() const
{
	switch(index_)
	{
		case TerranInfantryArmor1:
			return BWAPI::UpgradeTypes::Terran_Infantry_Armor;
		case TerranInfantryArmor2:
			return BWAPI::UpgradeTypes::Terran_Infantry_Armor;
		case TerranInfantryArmor3:
			return BWAPI::UpgradeTypes::Terran_Infantry_Armor;
		case TerranVehiclePlating1:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Plating;
		case TerranVehiclePlating2:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Plating;
		case TerranVehiclePlating3:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Plating;
		case TerranShipPlating1:
			return BWAPI::UpgradeTypes::Terran_Ship_Plating;
		case TerranShipPlating2:
			return BWAPI::UpgradeTypes::Terran_Ship_Plating;
		case TerranShipPlating3:
			return BWAPI::UpgradeTypes::Terran_Ship_Plating;
		case ZergCarapace1:
			return BWAPI::UpgradeTypes::Zerg_Carapace;
		case ZergCarapace2:
			return BWAPI::UpgradeTypes::Zerg_Carapace;
		case ZergCarapace3:
			return BWAPI::UpgradeTypes::Zerg_Carapace;
		case ZergFlyerCarapace1:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Carapace;
		case ZergFlyerCarapace2:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Carapace;
		case ZergFlyerCarapace3:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Carapace;
		case ProtossGroundArmor1:
			return BWAPI::UpgradeTypes::Protoss_Ground_Armor;
		case ProtossGroundArmor2:
			return BWAPI::UpgradeTypes::Protoss_Ground_Armor;
		case ProtossGroundArmor3:
			return BWAPI::UpgradeTypes::Protoss_Ground_Armor;
		case ProtossAirArmor1:
			return BWAPI::UpgradeTypes::Protoss_Air_Armor;
		case ProtossAirArmor2:
			return BWAPI::UpgradeTypes::Protoss_Air_Armor;
		case ProtossAirArmor3:
			return BWAPI::UpgradeTypes::Protoss_Air_Armor;
		case TerranInfantryWeapons1:
			return BWAPI::UpgradeTypes::Terran_Infantry_Weapons;
		case TerranInfantryWeapons2:
			return BWAPI::UpgradeTypes::Terran_Infantry_Weapons;
		case TerranInfantryWeapons3:
			return BWAPI::UpgradeTypes::Terran_Infantry_Weapons;
		case TerranVehicleWeapons1:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Weapons;
		case TerranVehicleWeapons2:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Weapons;
		case TerranVehicleWeapons3:
			return BWAPI::UpgradeTypes::Terran_Vehicle_Weapons;
		case TerranShipWeapons1:
			return BWAPI::UpgradeTypes::Terran_Ship_Weapons;
		case TerranShipWeapons2:
			return BWAPI::UpgradeTypes::Terran_Ship_Weapons;
		case TerranShipWeapons3:
			return BWAPI::UpgradeTypes::Terran_Ship_Weapons;
		case ZergMeleeAttacks1:
			return BWAPI::UpgradeTypes::Zerg_Melee_Attacks;
		case ZergMeleeAttacks2:
			return BWAPI::UpgradeTypes::Zerg_Melee_Attacks;
		case ZergMeleeAttacks3:
			return BWAPI::UpgradeTypes::Zerg_Melee_Attacks;
		case ZergMissileAttacks1:
			return BWAPI::UpgradeTypes::Zerg_Missile_Attacks;
		case ZergMissileAttacks2:
			return BWAPI::UpgradeTypes::Zerg_Missile_Attacks;
		case ZergMissileAttacks3:
			return BWAPI::UpgradeTypes::Zerg_Missile_Attacks;
		case ZergFlyerAttacks1:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Attacks;
		case ZergFlyerAttacks2:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Attacks;
		case ZergFlyerAttacks3:
			return BWAPI::UpgradeTypes::Zerg_Flyer_Attacks;
		case ProtossGroundWeapons1:
			return BWAPI::UpgradeTypes::Protoss_Ground_Weapons;
		case ProtossGroundWeapons2:
			return BWAPI::UpgradeTypes::Protoss_Ground_Weapons;
		case ProtossGroundWeapons3:
			return BWAPI::UpgradeTypes::Protoss_Ground_Weapons;
		case ProtossAirWeapons1:
			return BWAPI::UpgradeTypes::Protoss_Air_Weapons;
		case ProtossAirWeapons2:
			return BWAPI::UpgradeTypes::Protoss_Air_Weapons;
		case ProtossAirWeapons3:
			return BWAPI::UpgradeTypes::Protoss_Air_Weapons;
		case ProtossPlasmaShields1:
			return BWAPI::UpgradeTypes::Protoss_Plasma_Shields;
		case ProtossPlasmaShields2:
			return BWAPI::UpgradeTypes::Protoss_Plasma_Shields;
		case ProtossPlasmaShields3:
			return BWAPI::UpgradeTypes::Protoss_Plasma_Shields;
		case U_238Shells1:
			return BWAPI::UpgradeTypes::U_238_Shells;
		case IonThrusters1:
			return BWAPI::UpgradeTypes::Ion_Thrusters;
		case TitanReactor1:
			return BWAPI::UpgradeTypes::Titan_Reactor;
		case OcularImplants1:
			return BWAPI::UpgradeTypes::Ocular_Implants;
		case MoebiusReactor1:
			return BWAPI::UpgradeTypes::Moebius_Reactor;
		case ApolloReactor1:
			return BWAPI::UpgradeTypes::Apollo_Reactor;
		case ColossusReactor1:
			return BWAPI::UpgradeTypes::Colossus_Reactor;
		case VentralSacs1:
			return BWAPI::UpgradeTypes::Ventral_Sacs;
		case Antennae1:
			return BWAPI::UpgradeTypes::Antennae;
		case PneumatizedCarapace1:
			return BWAPI::UpgradeTypes::Pneumatized_Carapace;
		case MetabolicBoost1:
			return BWAPI::UpgradeTypes::Metabolic_Boost;
		case AdrenalGlands1:
			return BWAPI::UpgradeTypes::Adrenal_Glands;
		case MuscularAugments1:
			return BWAPI::UpgradeTypes::Muscular_Augments;
		case GroovedSpines1:
			return BWAPI::UpgradeTypes::Grooved_Spines;
		case GameteMeiosis1:
			return BWAPI::UpgradeTypes::Gamete_Meiosis;
		case MetasynapticNode1:
			return BWAPI::UpgradeTypes::Metasynaptic_Node;
		case SingularityCharge1:
			return BWAPI::UpgradeTypes::Singularity_Charge;
		case LegEnhancements1:
			return BWAPI::UpgradeTypes::Leg_Enhancements;
		case ScarabDamage1:
			return BWAPI::UpgradeTypes::Scarab_Damage;
		case ReaverCapacity1:
			return BWAPI::UpgradeTypes::Reaver_Capacity;
		case GraviticDrive1:
			return BWAPI::UpgradeTypes::Gravitic_Drive;
		case SensorArray1:
			return BWAPI::UpgradeTypes::Sensor_Array;
		case GraviticBoosters1:
			return BWAPI::UpgradeTypes::Gravitic_Boosters;
		case KhaydarinAmulet1:
			return BWAPI::UpgradeTypes::Khaydarin_Amulet;
		case ApialSensors1:
			return BWAPI::UpgradeTypes::Apial_Sensors;
		case GraviticThrusters1:
			return BWAPI::UpgradeTypes::Gravitic_Thrusters;
		case CarrierCapacity1:
			return BWAPI::UpgradeTypes::Carrier_Capacity;
		case KhaydarinCore1:
			return BWAPI::UpgradeTypes::Khaydarin_Core;
		case ArgusJewel1:
			return BWAPI::UpgradeTypes::Argus_Jewel;
		case ArgusTalisman1:
			return BWAPI::UpgradeTypes::Argus_Talisman;
		case CaduceusReactor1:
			return BWAPI::UpgradeTypes::Caduceus_Reactor;
		case ChitinousPlating1:
			return BWAPI::UpgradeTypes::Chitinous_Plating;
		case AnabolicSynthesis1:
			return BWAPI::UpgradeTypes::Anabolic_Synthesis;
		case CharonBoosters1:
			return BWAPI::UpgradeTypes::Charon_Boosters;
		default:
			return BWAPI::UpgradeTypes::None;
	}
}

TimeType Operation::duration() const
{
	switch(index_.getType())
	{
		case OI::SendTerranGasWorker:
			return 1;
		case OI::ReturnTerranGasWorker:
			return 1;
		case OI::SendProtossGasWorker:
			return 1;
		case OI::ReturnProtossGasWorker:
			return 1;
		case OI::SendZergGasWorker:
			return 1;
		case OI::ReturnZergGasWorker:
			return 1;
		case OI::TerranMarine:
			return 361;
		case OI::TerranGhost:
			return 751;
		case OI::TerranVulture:
			return 451;
		case OI::TerranGoliath:
			return 601;
		case OI::TerranSiegeTankTankMode:
			return 751;
		case OI::TerranSCV:
			return 301;
		case OI::TerranWraith:
			return 901;
		case OI::TerranScienceVessel:
			return 1201;
		case OI::TerranDropship:
			return 751;
		case OI::TerranBattlecruiser:
			return 2001;
		case OI::TerranNuclearMissile:
			return 1501;
		case OI::TerranFirebat:
			return 361;
		case OI::TerranMedic:
			return 451;
		case OI::ZergZergling:
			return 420;
		case OI::ZergHydralisk:
			return 420;
		case OI::ZergUltralisk:
			return 900;
		case OI::ZergDrone:
			return 301;
		case OI::ZergOverlord:
			return 601;
		case OI::ZergMutalisk:
			return 600;
		case OI::ZergGuardian:
			return 1200;
		case OI::ZergQueen:
			return 750;
		case OI::ZergDefiler:
			return 750;
		case OI::ZergScourge:
			return 450;
		case OI::ZergInfestedTerran:
			return 600;
		case OI::TerranValkyrie:
			return 751;
		case OI::ProtossCorsair:
			return 601;
		case OI::ProtossDarkTemplar:
			return 751;
		case OI::ZergDevourer:
			return 1200;
		case OI::ProtossProbe:
			return 301;
		case OI::ProtossZealot:
			return 601;
		case OI::ProtossDragoon:
			return 751;
		case OI::ProtossHighTemplar:
			return 751;
		case OI::ProtossShuttle:
			return 901;
		case OI::ProtossScout:
			return 1201;
		case OI::ProtossArbiter:
			return 2401;
		case OI::ProtossCarrier:
			return 2101;
		case OI::ProtossReaver:
			return 1051;
		case OI::ProtossObserver:
			return 601;
		case OI::ZergLurker:
			return 1020;
		case OI::TerranCommandCenter:
			return 1846;
		case OI::TerranComsatStation:
			return 601;
		case OI::TerranNuclearSilo:
			return 1201;
		case OI::TerranSupplyDepot:
			return 646;
		case OI::TerranRefinery:
			return 646;
		case OI::TerranBarracks:
			return 1246;
		case OI::TerranAcademy:
			return 1246;
		case OI::TerranFactory:
			return 1246;
		case OI::TerranStarport:
			return 1096;
		case OI::TerranControlTower:
			return 601;
		case OI::TerranScienceFacility:
			return 946;
		case OI::TerranCovertOps:
			return 601;
		case OI::TerranPhysicsLab:
			return 601;
		case OI::TerranMachineShop:
			return 601;
		case OI::TerranEngineeringBay:
			return 946;
		case OI::TerranArmory:
			return 1246;
		case OI::TerranMissileTurret:
			return 496;
		case OI::TerranBunker:
			return 496;
		case OI::ZergHatchery:
			return 1846;
		case OI::ZergLair:
			return 1501;
		case OI::ZergHive:
			return 1801;
		case OI::ZergNydusCanal:
			return 646;
		case OI::ZergHydraliskDen:
			return 646;
		case OI::ZergDefilerMound:
			return 946;
		case OI::ZergGreaterSpire:
			return 1846;
		case OI::ZergQueensNest:
			return 946;
		case OI::ZergEvolutionChamber:
			return 646;
		case OI::ZergUltraliskCavern:
			return 1246;
		case OI::ZergSpire:
			return 1846;
		case OI::ZergSpawningPool:
			return 1246;
		case OI::ZergCreepColony:
			return 346;
		case OI::ZergSporeColony:
			return 647;
		case OI::ZergSunkenColony:
			return 647;
		case OI::ZergExtractor:
			return 646;
		case OI::ProtossNexus:
			return 1846;
		case OI::ProtossRoboticsFacility:
			return 1246;
		case OI::ProtossPylon:
			return 496;
		case OI::ProtossAssimilator:
			return 646;
		case OI::ProtossObservatory:
			return 496;
		case OI::ProtossGateway:
			return 946;
		case OI::ProtossPhotonCannon:
			return 796;
		case OI::ProtossCitadelofAdun:
			return 946;
		case OI::ProtossCyberneticsCore:
			return 946;
		case OI::ProtossTemplarArchives:
			return 946;
		case OI::ProtossForge:
			return 646;
		case OI::ProtossStargate:
			return 1096;
		case OI::ProtossFleetBeacon:
			return 946;
		case OI::ProtossArbiterTribunal:
			return 946;
		case OI::ProtossRoboticsSupportBay:
			return 496;
		case OI::ProtossShieldBattery:
			return 496;
		case OI::StimPacks:
			return 1201;
		case OI::Lockdown:
			return 1501;
		case OI::EMPShockwave:
			return 1801;
		case OI::SpiderMines:
			return 1201;
		case OI::TankSiegeMode:
			return 1201;
		case OI::Irradiate:
			return 1201;
		case OI::YamatoGun:
			return 1801;
		case OI::CloakingField:
			return 1501;
		case OI::PersonnelCloaking:
			return 1201;
		case OI::Burrowing:
			return 1201;
		case OI::SpawnBroodlings:
			return 1201;
		case OI::Plague:
			return 1501;
		case OI::Consume:
			return 1501;
		case OI::Ensnare:
			return 1201;
		case OI::PsionicStorm:
			return 1801;
		case OI::Hallucination:
			return 1201;
		case OI::Recall:
			return 1801;
		case OI::StasisField:
			return 1501;
		case OI::Restoration:
			return 1201;
		case OI::DisruptionWeb:
			return 1201;
		case OI::MindControl:
			return 1801;
		case OI::OpticalFlare:
			return 1801;
		case OI::Maelstrom:
			return 1501;
		case OI::LurkerAspect:
			return 1801;
		case OI::TerranInfantryArmor1:
			return 4001;
		case OI::TerranInfantryArmor2:
			return 4481;
		case OI::TerranInfantryArmor3:
			return 4961;
		case OI::TerranVehiclePlating1:
			return 4001;
		case OI::TerranVehiclePlating2:
			return 4481;
		case OI::TerranVehiclePlating3:
			return 4961;
		case OI::TerranShipPlating1:
			return 4001;
		case OI::TerranShipPlating2:
			return 4481;
		case OI::TerranShipPlating3:
			return 4961;
		case OI::ZergCarapace1:
			return 4001;
		case OI::ZergCarapace2:
			return 4481;
		case OI::ZergCarapace3:
			return 4961;
		case OI::ZergFlyerCarapace1:
			return 4001;
		case OI::ZergFlyerCarapace2:
			return 4481;
		case OI::ZergFlyerCarapace3:
			return 4961;
		case OI::ProtossGroundArmor1:
			return 4001;
		case OI::ProtossGroundArmor2:
			return 4481;
		case OI::ProtossGroundArmor3:
			return 4961;
		case OI::ProtossAirArmor1:
			return 4001;
		case OI::ProtossAirArmor2:
			return 4481;
		case OI::ProtossAirArmor3:
			return 4961;
		case OI::TerranInfantryWeapons1:
			return 4001;
		case OI::TerranInfantryWeapons2:
			return 4481;
		case OI::TerranInfantryWeapons3:
			return 4961;
		case OI::TerranVehicleWeapons1:
			return 4001;
		case OI::TerranVehicleWeapons2:
			return 4481;
		case OI::TerranVehicleWeapons3:
			return 4961;
		case OI::TerranShipWeapons1:
			return 4001;
		case OI::TerranShipWeapons2:
			return 4481;
		case OI::TerranShipWeapons3:
			return 4961;
		case OI::ZergMeleeAttacks1:
			return 4001;
		case OI::ZergMeleeAttacks2:
			return 4481;
		case OI::ZergMeleeAttacks3:
			return 4961;
		case OI::ZergMissileAttacks1:
			return 4001;
		case OI::ZergMissileAttacks2:
			return 4481;
		case OI::ZergMissileAttacks3:
			return 4961;
		case OI::ZergFlyerAttacks1:
			return 4001;
		case OI::ZergFlyerAttacks2:
			return 4481;
		case OI::ZergFlyerAttacks3:
			return 4961;
		case OI::ProtossGroundWeapons1:
			return 4001;
		case OI::ProtossGroundWeapons2:
			return 4481;
		case OI::ProtossGroundWeapons3:
			return 4961;
		case OI::ProtossAirWeapons1:
			return 4001;
		case OI::ProtossAirWeapons2:
			return 4481;
		case OI::ProtossAirWeapons3:
			return 4961;
		case OI::ProtossPlasmaShields1:
			return 4001;
		case OI::ProtossPlasmaShields2:
			return 4481;
		case OI::ProtossPlasmaShields3:
			return 4961;
		case OI::U_238Shells1:
			return 1501;
		case OI::IonThrusters1:
			return 1501;
		case OI::TitanReactor1:
			return 2501;
		case OI::OcularImplants1:
			return 2501;
		case OI::MoebiusReactor1:
			return 2501;
		case OI::ApolloReactor1:
			return 2501;
		case OI::ColossusReactor1:
			return 2501;
		case OI::VentralSacs1:
			return 2401;
		case OI::Antennae1:
			return 2001;
		case OI::PneumatizedCarapace1:
			return 2001;
		case OI::MetabolicBoost1:
			return 1501;
		case OI::AdrenalGlands1:
			return 1501;
		case OI::MuscularAugments1:
			return 1501;
		case OI::GroovedSpines1:
			return 1501;
		case OI::GameteMeiosis1:
			return 2501;
		case OI::MetasynapticNode1:
			return 2501;
		case OI::SingularityCharge1:
			return 2501;
		case OI::LegEnhancements1:
			return 2001;
		case OI::ScarabDamage1:
			return 2501;
		case OI::ReaverCapacity1:
			return 2501;
		case OI::GraviticDrive1:
			return 2501;
		case OI::SensorArray1:
			return 2001;
		case OI::GraviticBoosters1:
			return 2001;
		case OI::KhaydarinAmulet1:
			return 2501;
		case OI::ApialSensors1:
			return 2501;
		case OI::GraviticThrusters1:
			return 2501;
		case OI::CarrierCapacity1:
			return 1501;
		case OI::KhaydarinCore1:
			return 2501;
		case OI::ArgusJewel1:
			return 2501;
		case OI::ArgusTalisman1:
			return 2501;
		case OI::CaduceusReactor1:
			return 2501;
		case OI::ChitinousPlating1:
			return 2001;
		case OI::AnabolicSynthesis1:
			return 2001;
		case OI::CharonBoosters1:
			return 2001;
		default:
			return 0;
	}
}

int Operation::stageCount() const
{
	switch(index_.getType())
	{
		case OI::SendTerranGasWorker:
			return 1;
		case OI::ReturnTerranGasWorker:
			return 1;
		case OI::SendProtossGasWorker:
			return 1;
		case OI::ReturnProtossGasWorker:
			return 1;
		case OI::SendZergGasWorker:
			return 1;
		case OI::ReturnZergGasWorker:
			return 1;
		case OI::TerranMarine:
			return 2;
		case OI::TerranGhost:
			return 2;
		case OI::TerranVulture:
			return 2;
		case OI::TerranGoliath:
			return 2;
		case OI::TerranSiegeTankTankMode:
			return 2;
		case OI::TerranSCV:
			return 2;
		case OI::TerranWraith:
			return 2;
		case OI::TerranScienceVessel:
			return 2;
		case OI::TerranDropship:
			return 2;
		case OI::TerranBattlecruiser:
			return 2;
		case OI::TerranNuclearMissile:
			return 2;
		case OI::TerranFirebat:
			return 2;
		case OI::TerranMedic:
			return 2;
		case OI::ZergZergling:
			return 1;
		case OI::ZergHydralisk:
			return 1;
		case OI::ZergUltralisk:
			return 1;
		case OI::ZergDrone:
			return 2;
		case OI::ZergOverlord:
			return 2;
		case OI::ZergMutalisk:
			return 1;
		case OI::ZergGuardian:
			return 2;
		case OI::ZergQueen:
			return 1;
		case OI::ZergDefiler:
			return 1;
		case OI::ZergScourge:
			return 1;
		case OI::ZergInfestedTerran:
			return 1;
		case OI::TerranValkyrie:
			return 2;
		case OI::ProtossCorsair:
			return 2;
		case OI::ProtossDarkTemplar:
			return 2;
		case OI::ZergDevourer:
			return 2;
		case OI::ProtossProbe:
			return 2;
		case OI::ProtossZealot:
			return 2;
		case OI::ProtossDragoon:
			return 2;
		case OI::ProtossHighTemplar:
			return 2;
		case OI::ProtossShuttle:
			return 2;
		case OI::ProtossScout:
			return 2;
		case OI::ProtossArbiter:
			return 2;
		case OI::ProtossCarrier:
			return 2;
		case OI::ProtossReaver:
			return 2;
		case OI::ProtossObserver:
			return 2;
		case OI::ZergLurker:
			return 2;
		case OI::TerranCommandCenter:
			return 3;
		case OI::TerranComsatStation:
			return 2;
		case OI::TerranNuclearSilo:
			return 2;
		case OI::TerranSupplyDepot:
			return 3;
		case OI::TerranRefinery:
			return 3;
		case OI::TerranBarracks:
			return 3;
		case OI::TerranAcademy:
			return 3;
		case OI::TerranFactory:
			return 3;
		case OI::TerranStarport:
			return 3;
		case OI::TerranControlTower:
			return 2;
		case OI::TerranScienceFacility:
			return 3;
		case OI::TerranCovertOps:
			return 2;
		case OI::TerranPhysicsLab:
			return 2;
		case OI::TerranMachineShop:
			return 2;
		case OI::TerranEngineeringBay:
			return 3;
		case OI::TerranArmory:
			return 3;
		case OI::TerranMissileTurret:
			return 3;
		case OI::TerranBunker:
			return 3;
		case OI::ZergHatchery:
			return 3;
		case OI::ZergLair:
			return 2;
		case OI::ZergHive:
			return 2;
		case OI::ZergNydusCanal:
			return 3;
		case OI::ZergHydraliskDen:
			return 3;
		case OI::ZergDefilerMound:
			return 3;
		case OI::ZergGreaterSpire:
			return 3;
		case OI::ZergQueensNest:
			return 3;
		case OI::ZergEvolutionChamber:
			return 3;
		case OI::ZergUltraliskCavern:
			return 3;
		case OI::ZergSpire:
			return 3;
		case OI::ZergSpawningPool:
			return 3;
		case OI::ZergCreepColony:
			return 3;
		case OI::ZergSporeColony:
			return 5;
		case OI::ZergSunkenColony:
			return 5;
		case OI::ZergExtractor:
			return 3;
		case OI::ProtossNexus:
			return 3;
		case OI::ProtossRoboticsFacility:
			return 3;
		case OI::ProtossPylon:
			return 3;
		case OI::ProtossAssimilator:
			return 3;
		case OI::ProtossObservatory:
			return 3;
		case OI::ProtossGateway:
			return 3;
		case OI::ProtossPhotonCannon:
			return 3;
		case OI::ProtossCitadelofAdun:
			return 3;
		case OI::ProtossCyberneticsCore:
			return 3;
		case OI::ProtossTemplarArchives:
			return 3;
		case OI::ProtossForge:
			return 3;
		case OI::ProtossStargate:
			return 3;
		case OI::ProtossFleetBeacon:
			return 3;
		case OI::ProtossArbiterTribunal:
			return 3;
		case OI::ProtossRoboticsSupportBay:
			return 3;
		case OI::ProtossShieldBattery:
			return 3;
		case OI::StimPacks:
			return 2;
		case OI::Lockdown:
			return 2;
		case OI::EMPShockwave:
			return 2;
		case OI::SpiderMines:
			return 2;
		case OI::TankSiegeMode:
			return 2;
		case OI::Irradiate:
			return 2;
		case OI::YamatoGun:
			return 2;
		case OI::CloakingField:
			return 2;
		case OI::PersonnelCloaking:
			return 2;
		case OI::Burrowing:
			return 2;
		case OI::SpawnBroodlings:
			return 2;
		case OI::Plague:
			return 2;
		case OI::Consume:
			return 2;
		case OI::Ensnare:
			return 2;
		case OI::PsionicStorm:
			return 2;
		case OI::Hallucination:
			return 2;
		case OI::Recall:
			return 2;
		case OI::StasisField:
			return 2;
		case OI::Restoration:
			return 2;
		case OI::DisruptionWeb:
			return 2;
		case OI::MindControl:
			return 2;
		case OI::OpticalFlare:
			return 2;
		case OI::Maelstrom:
			return 2;
		case OI::LurkerAspect:
			return 2;
		case OI::TerranInfantryArmor1:
			return 2;
		case OI::TerranInfantryArmor2:
			return 2;
		case OI::TerranInfantryArmor3:
			return 2;
		case OI::TerranVehiclePlating1:
			return 2;
		case OI::TerranVehiclePlating2:
			return 2;
		case OI::TerranVehiclePlating3:
			return 2;
		case OI::TerranShipPlating1:
			return 2;
		case OI::TerranShipPlating2:
			return 2;
		case OI::TerranShipPlating3:
			return 2;
		case OI::ZergCarapace1:
			return 2;
		case OI::ZergCarapace2:
			return 2;
		case OI::ZergCarapace3:
			return 2;
		case OI::ZergFlyerCarapace1:
			return 2;
		case OI::ZergFlyerCarapace2:
			return 2;
		case OI::ZergFlyerCarapace3:
			return 2;
		case OI::ProtossGroundArmor1:
			return 2;
		case OI::ProtossGroundArmor2:
			return 2;
		case OI::ProtossGroundArmor3:
			return 2;
		case OI::ProtossAirArmor1:
			return 2;
		case OI::ProtossAirArmor2:
			return 2;
		case OI::ProtossAirArmor3:
			return 2;
		case OI::TerranInfantryWeapons1:
			return 2;
		case OI::TerranInfantryWeapons2:
			return 2;
		case OI::TerranInfantryWeapons3:
			return 2;
		case OI::TerranVehicleWeapons1:
			return 2;
		case OI::TerranVehicleWeapons2:
			return 2;
		case OI::TerranVehicleWeapons3:
			return 2;
		case OI::TerranShipWeapons1:
			return 2;
		case OI::TerranShipWeapons2:
			return 2;
		case OI::TerranShipWeapons3:
			return 2;
		case OI::ZergMeleeAttacks1:
			return 2;
		case OI::ZergMeleeAttacks2:
			return 2;
		case OI::ZergMeleeAttacks3:
			return 2;
		case OI::ZergMissileAttacks1:
			return 2;
		case OI::ZergMissileAttacks2:
			return 2;
		case OI::ZergMissileAttacks3:
			return 2;
		case OI::ZergFlyerAttacks1:
			return 2;
		case OI::ZergFlyerAttacks2:
			return 2;
		case OI::ZergFlyerAttacks3:
			return 2;
		case OI::ProtossGroundWeapons1:
			return 2;
		case OI::ProtossGroundWeapons2:
			return 2;
		case OI::ProtossGroundWeapons3:
			return 2;
		case OI::ProtossAirWeapons1:
			return 2;
		case OI::ProtossAirWeapons2:
			return 2;
		case OI::ProtossAirWeapons3:
			return 2;
		case OI::ProtossPlasmaShields1:
			return 2;
		case OI::ProtossPlasmaShields2:
			return 2;
		case OI::ProtossPlasmaShields3:
			return 2;
		case OI::U_238Shells1:
			return 2;
		case OI::IonThrusters1:
			return 2;
		case OI::TitanReactor1:
			return 2;
		case OI::OcularImplants1:
			return 2;
		case OI::MoebiusReactor1:
			return 2;
		case OI::ApolloReactor1:
			return 2;
		case OI::ColossusReactor1:
			return 2;
		case OI::VentralSacs1:
			return 2;
		case OI::Antennae1:
			return 2;
		case OI::PneumatizedCarapace1:
			return 2;
		case OI::MetabolicBoost1:
			return 2;
		case OI::AdrenalGlands1:
			return 2;
		case OI::MuscularAugments1:
			return 2;
		case OI::GroovedSpines1:
			return 2;
		case OI::GameteMeiosis1:
			return 2;
		case OI::MetasynapticNode1:
			return 2;
		case OI::SingularityCharge1:
			return 2;
		case OI::LegEnhancements1:
			return 2;
		case OI::ScarabDamage1:
			return 2;
		case OI::ReaverCapacity1:
			return 2;
		case OI::GraviticDrive1:
			return 2;
		case OI::SensorArray1:
			return 2;
		case OI::GraviticBoosters1:
			return 2;
		case OI::KhaydarinAmulet1:
			return 2;
		case OI::ApialSensors1:
			return 2;
		case OI::GraviticThrusters1:
			return 2;
		case OI::CarrierCapacity1:
			return 2;
		case OI::KhaydarinCore1:
			return 2;
		case OI::ArgusJewel1:
			return 2;
		case OI::ArgusTalisman1:
			return 2;
		case OI::CaduceusReactor1:
			return 2;
		case OI::ChitinousPlating1:
			return 2;
		case OI::AnabolicSynthesis1:
			return 2;
		case OI::CharonBoosters1:
			return 2;
		default:
			return 0;
	}
}

TimeType Operation::stageDuration(int stage) const
{
	switch(index_.getType())
	{
		case OI::SendTerranGasWorker:
			switch(stage)
			{
				case 0:
					return 1;
				default:
					return 0;
			}
		case OI::ReturnTerranGasWorker:
			switch(stage)
			{
				case 0:
					return 1;
				default:
					return 0;
			}
		case OI::SendProtossGasWorker:
			switch(stage)
			{
				case 0:
					return 1;
				default:
					return 0;
			}
		case OI::ReturnProtossGasWorker:
			switch(stage)
			{
				case 0:
					return 1;
				default:
					return 0;
			}
		case OI::SendZergGasWorker:
			switch(stage)
			{
				case 0:
					return 1;
				default:
					return 0;
			}
		case OI::ReturnZergGasWorker:
			switch(stage)
			{
				case 0:
					return 1;
				default:
					return 0;
			}
		case OI::TerranMarine:
			switch(stage)
			{
				case 0:
					return 360;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranGhost:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranVulture:
			switch(stage)
			{
				case 0:
					return 450;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranGoliath:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranSiegeTankTankMode:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranSCV:
			switch(stage)
			{
				case 0:
					return 300;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranWraith:
			switch(stage)
			{
				case 0:
					return 900;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranScienceVessel:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranDropship:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranBattlecruiser:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranNuclearMissile:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranFirebat:
			switch(stage)
			{
				case 0:
					return 360;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranMedic:
			switch(stage)
			{
				case 0:
					return 450;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergZergling:
			switch(stage)
			{
				case 0:
					return 420;
				default:
					return 0;
			}
		case OI::ZergHydralisk:
			switch(stage)
			{
				case 0:
					return 420;
				default:
					return 0;
			}
		case OI::ZergUltralisk:
			switch(stage)
			{
				case 0:
					return 900;
				default:
					return 0;
			}
		case OI::ZergDrone:
			switch(stage)
			{
				case 0:
					return 300;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergOverlord:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergMutalisk:
			switch(stage)
			{
				case 0:
					return 600;
				default:
					return 0;
			}
		case OI::ZergGuardian:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 600;
				default:
					return 0;
			}
		case OI::ZergQueen:
			switch(stage)
			{
				case 0:
					return 750;
				default:
					return 0;
			}
		case OI::ZergDefiler:
			switch(stage)
			{
				case 0:
					return 750;
				default:
					return 0;
			}
		case OI::ZergScourge:
			switch(stage)
			{
				case 0:
					return 450;
				default:
					return 0;
			}
		case OI::ZergInfestedTerran:
			switch(stage)
			{
				case 0:
					return 600;
				default:
					return 0;
			}
		case OI::TerranValkyrie:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossCorsair:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossDarkTemplar:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergDevourer:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 600;
				default:
					return 0;
			}
		case OI::ProtossProbe:
			switch(stage)
			{
				case 0:
					return 300;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossZealot:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossDragoon:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossHighTemplar:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossShuttle:
			switch(stage)
			{
				case 0:
					return 900;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossScout:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossArbiter:
			switch(stage)
			{
				case 0:
					return 2400;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossCarrier:
			switch(stage)
			{
				case 0:
					return 2100;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossReaver:
			switch(stage)
			{
				case 0:
					return 1050;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossObserver:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergLurker:
			switch(stage)
			{
				case 0:
					return 420;
				case 1:
					return 600;
				default:
					return 0;
			}
		case OI::TerranCommandCenter:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranComsatStation:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranNuclearSilo:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranSupplyDepot:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranRefinery:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranBarracks:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranAcademy:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranFactory:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranStarport:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1050;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranControlTower:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranScienceFacility:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranCovertOps:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranPhysicsLab:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranMachineShop:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranEngineeringBay:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranArmory:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranMissileTurret:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::TerranBunker:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergHatchery:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergLair:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergHive:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergNydusCanal:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergHydraliskDen:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergDefilerMound:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergGreaterSpire:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergQueensNest:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergEvolutionChamber:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergUltraliskCavern:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergSpire:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergSpawningPool:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergCreepColony:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 300;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ZergSporeColony:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 300;
				case 2:
					return 1;
				case 3:
					return 300;
				case 4:
					return 1;
				default:
					return 0;
			}
		case OI::ZergSunkenColony:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 300;
				case 2:
					return 1;
				case 3:
					return 300;
				case 4:
					return 1;
				default:
					return 0;
			}
		case OI::ZergExtractor:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossNexus:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossRoboticsFacility:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossPylon:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossAssimilator:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossObservatory:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossGateway:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossPhotonCannon:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 750;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossCitadelofAdun:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossCyberneticsCore:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossTemplarArchives:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossForge:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossStargate:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1050;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossFleetBeacon:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossArbiterTribunal:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossRoboticsSupportBay:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossShieldBattery:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case OI::StimPacks:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Lockdown:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::EMPShockwave:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::SpiderMines:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TankSiegeMode:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Irradiate:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::YamatoGun:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::CloakingField:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::PersonnelCloaking:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Burrowing:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::SpawnBroodlings:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Plague:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Consume:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Ensnare:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::PsionicStorm:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Hallucination:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Recall:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::StasisField:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Restoration:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::DisruptionWeb:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::MindControl:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::OpticalFlare:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Maelstrom:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::LurkerAspect:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranInfantryArmor1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranInfantryArmor2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranInfantryArmor3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranVehiclePlating1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranVehiclePlating2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranVehiclePlating3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranShipPlating1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranShipPlating2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranShipPlating3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergCarapace1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergCarapace2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergCarapace3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergFlyerCarapace1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergFlyerCarapace2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergFlyerCarapace3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossGroundArmor1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossGroundArmor2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossGroundArmor3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossAirArmor1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossAirArmor2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossAirArmor3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranInfantryWeapons1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranInfantryWeapons2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranInfantryWeapons3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranVehicleWeapons1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranVehicleWeapons2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranVehicleWeapons3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranShipWeapons1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranShipWeapons2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TerranShipWeapons3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergMeleeAttacks1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergMeleeAttacks2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergMeleeAttacks3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergMissileAttacks1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergMissileAttacks2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergMissileAttacks3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergFlyerAttacks1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergFlyerAttacks2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ZergFlyerAttacks3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossGroundWeapons1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossGroundWeapons2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossGroundWeapons3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossAirWeapons1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossAirWeapons2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossAirWeapons3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossPlasmaShields1:
			switch(stage)
			{
				case 0:
					return 4000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossPlasmaShields2:
			switch(stage)
			{
				case 0:
					return 4480;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ProtossPlasmaShields3:
			switch(stage)
			{
				case 0:
					return 4960;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::U_238Shells1:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::IonThrusters1:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::TitanReactor1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::OcularImplants1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::MoebiusReactor1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ApolloReactor1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ColossusReactor1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::VentralSacs1:
			switch(stage)
			{
				case 0:
					return 2400;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::Antennae1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::PneumatizedCarapace1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::MetabolicBoost1:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::AdrenalGlands1:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::MuscularAugments1:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::GroovedSpines1:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::GameteMeiosis1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::MetasynapticNode1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::SingularityCharge1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::LegEnhancements1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ScarabDamage1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ReaverCapacity1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::GraviticDrive1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::SensorArray1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::GraviticBoosters1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::KhaydarinAmulet1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ApialSensors1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::GraviticThrusters1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::CarrierCapacity1:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::KhaydarinCore1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ArgusJewel1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ArgusTalisman1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::CaduceusReactor1:
			switch(stage)
			{
				case 0:
					return 2500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::ChitinousPlating1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::AnabolicSynthesis1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case OI::CharonBoosters1:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		default:
			return 0;
	}
}

void Operation::execute(bool justactived)
{
	switch(index_.getType())
	{
		case OI::SendTerranGasWorker:
			switch(stage_)
			{
				case 0:
					Call(CSendGasWorker, justactived, *this); break;
			}
		case OI::ReturnTerranGasWorker:
			switch(stage_)
			{
				case 0:
					Call(CReturnGasWorker, justactived, *this); break;
			}
		case OI::SendProtossGasWorker:
			switch(stage_)
			{
				case 0:
					Call(CSendGasWorker, justactived, *this); break;
			}
		case OI::ReturnProtossGasWorker:
			switch(stage_)
			{
				case 0:
					Call(CReturnGasWorker, justactived, *this); break;
			}
		case OI::SendZergGasWorker:
			switch(stage_)
			{
				case 0:
					Call(CSendGasWorker, justactived, *this); break;
			}
		case OI::ReturnZergGasWorker:
			switch(stage_)
			{
				case 0:
					Call(CReturnGasWorker, justactived, *this); break;
			}
		case OI::TerranMarine:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranGhost:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranVulture:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranGoliath:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranSiegeTankTankMode:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranSCV:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranWraith:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranScienceVessel:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranDropship:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranBattlecruiser:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranNuclearMissile:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranFirebat:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::TerranMedic:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ZergZergling:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergHydralisk:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergUltralisk:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergDrone:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ZergOverlord:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ZergMutalisk:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergGuardian:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
				case 1:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergQueen:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergDefiler:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergScourge:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ZergInfestedTerran:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::TerranValkyrie:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossCorsair:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossDarkTemplar:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ZergDevourer:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
				case 1:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::ProtossProbe:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossZealot:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossDragoon:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossHighTemplar:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossShuttle:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossScout:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossArbiter:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossCarrier:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossReaver:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ProtossObserver:
			switch(stage_)
			{
				case 0:
					Call(CTrainUnit, justactived, *this); break;
				case 1:
					Call(CUnitFinished, justactived, *this); break;
			}
		case OI::ZergLurker:
			switch(stage_)
			{
				case 0:
					Call(CMorphUnit, justactived, *this); break;
				case 1:
					Call(CMorphUnit, justactived, *this); break;
			}
		case OI::TerranCommandCenter:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranComsatStation:
			switch(stage_)
			{
				case 0:
					Call(CBuildAddon, justactived, *this); break;
				case 1:
					Call(CBuildAddonFinished, justactived, *this); break;
			}
		case OI::TerranNuclearSilo:
			switch(stage_)
			{
				case 0:
					Call(CBuildAddon, justactived, *this); break;
				case 1:
					Call(CBuildAddonFinished, justactived, *this); break;
			}
		case OI::TerranSupplyDepot:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranRefinery:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranBarracks:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranAcademy:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranFactory:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranStarport:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranControlTower:
			switch(stage_)
			{
				case 0:
					Call(CBuildAddon, justactived, *this); break;
				case 1:
					Call(CBuildAddonFinished, justactived, *this); break;
			}
		case OI::TerranScienceFacility:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranCovertOps:
			switch(stage_)
			{
				case 0:
					Call(CBuildAddon, justactived, *this); break;
				case 1:
					Call(CBuildAddonFinished, justactived, *this); break;
			}
		case OI::TerranPhysicsLab:
			switch(stage_)
			{
				case 0:
					Call(CBuildAddon, justactived, *this); break;
				case 1:
					Call(CBuildAddonFinished, justactived, *this); break;
			}
		case OI::TerranMachineShop:
			switch(stage_)
			{
				case 0:
					Call(CBuildAddon, justactived, *this); break;
				case 1:
					Call(CBuildAddonFinished, justactived, *this); break;
			}
		case OI::TerranEngineeringBay:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranArmory:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranMissileTurret:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::TerranBunker:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergHatchery:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergLair:
			switch(stage_)
			{
				case 0:
					Call(CBuildBuilding, justactived, *this); break;
				case 1:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergHive:
			switch(stage_)
			{
				case 0:
					Call(CBuildBuilding, justactived, *this); break;
				case 1:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergNydusCanal:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergHydraliskDen:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergDefilerMound:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergGreaterSpire:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergQueensNest:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergEvolutionChamber:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergUltraliskCavern:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergSpire:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergSpawningPool:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergCreepColony:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergSporeColony:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
				case 3:
					Call(CBuildBuilding, justactived, *this); break;
				case 4:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergSunkenColony:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
				case 3:
					Call(CBuildBuilding, justactived, *this); break;
				case 4:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ZergExtractor:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossNexus:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossRoboticsFacility:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossPylon:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossAssimilator:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossObservatory:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossGateway:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossPhotonCannon:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossCitadelofAdun:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossCyberneticsCore:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossTemplarArchives:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossForge:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossStargate:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossFleetBeacon:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossArbiterTribunal:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossRoboticsSupportBay:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::ProtossShieldBattery:
			switch(stage_)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, justactived, *this); break;
				case 1:
					Call(CBuildBuilding, justactived, *this); break;
				case 2:
					Call(CBuildingFinished, justactived, *this); break;
			}
		case OI::StimPacks:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Lockdown:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::EMPShockwave:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::SpiderMines:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::TankSiegeMode:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Irradiate:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::YamatoGun:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::CloakingField:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::PersonnelCloaking:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Burrowing:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::SpawnBroodlings:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Plague:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Consume:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Ensnare:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::PsionicStorm:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Hallucination:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Recall:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::StasisField:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Restoration:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::DisruptionWeb:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::MindControl:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::OpticalFlare:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::Maelstrom:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::LurkerAspect:
			switch(stage_)
			{
				case 0:
					Call(CTechStart, justactived, *this); break;
				case 1:
					Call(CTechFinished, justactived, *this); break;
			}
		case OI::TerranInfantryArmor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranInfantryArmor2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranInfantryArmor3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranVehiclePlating1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranVehiclePlating2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranVehiclePlating3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranShipPlating1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranShipPlating2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranShipPlating3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergCarapace1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergCarapace2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergCarapace3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergFlyerCarapace1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergFlyerCarapace2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergFlyerCarapace3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossGroundArmor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossGroundArmor2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossGroundArmor3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossAirArmor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossAirArmor2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossAirArmor3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranInfantryWeapons1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranInfantryWeapons2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranInfantryWeapons3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranVehicleWeapons1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranVehicleWeapons2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranVehicleWeapons3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranShipWeapons1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranShipWeapons2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TerranShipWeapons3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergMeleeAttacks1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergMeleeAttacks2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergMeleeAttacks3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergMissileAttacks1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergMissileAttacks2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergMissileAttacks3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergFlyerAttacks1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergFlyerAttacks2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ZergFlyerAttacks3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossGroundWeapons1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossGroundWeapons2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossGroundWeapons3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossAirWeapons1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossAirWeapons2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossAirWeapons3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossPlasmaShields1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossPlasmaShields2:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ProtossPlasmaShields3:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::U_238Shells1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::IonThrusters1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::TitanReactor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::OcularImplants1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::MoebiusReactor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ApolloReactor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ColossusReactor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::VentralSacs1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::Antennae1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::PneumatizedCarapace1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::MetabolicBoost1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::AdrenalGlands1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::MuscularAugments1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::GroovedSpines1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::GameteMeiosis1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::MetasynapticNode1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::SingularityCharge1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::LegEnhancements1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ScarabDamage1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ReaverCapacity1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::GraviticDrive1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::SensorArray1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::GraviticBoosters1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::KhaydarinAmulet1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ApialSensors1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::GraviticThrusters1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::CarrierCapacity1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::KhaydarinCore1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ArgusJewel1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ArgusTalisman1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::CaduceusReactor1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::ChitinousPlating1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::AnabolicSynthesis1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		case OI::CharonBoosters1:
			switch(stage_)
			{
				case 0:
					Call(CUpgradeStart, justactived, *this); break;
				case 1:
					Call(CUpgradeFinished, justactived, *this); break;
			}
		default:
			break;
	}
}

TimeType Operation::firstApplyableAt(const Resources& res, int stage, ResourceIndex& blocking) const
{
	TimeType result = 0;
	switch(index_.getType())
	{
		case OI::SendTerranGasWorker:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					Locks(res, 1, RI::GasWorkingPlaces, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ReturnTerranGasWorker:
			switch(stage)
			{
				case 0:
					Consums(res, 1, RI::TerranGasWorker, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::SendProtossGasWorker:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					Locks(res, 1, RI::GasWorkingPlaces, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ReturnProtossGasWorker:
			switch(stage)
			{
				case 0:
					Consums(res, 1, RI::ProtossGasWorker, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::SendZergGasWorker:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					Locks(res, 1, RI::GasWorkingPlaces, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ReturnZergGasWorker:
			switch(stage)
			{
				case 0:
					Consums(res, 1, RI::ZergGasWorker, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::TerranMarine:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranGhost:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Needs(res, 1, RI::TerranCovertOps, result, blocking);
					Consums(res, 25, RI::Minerals, result, blocking);
					Consums(res, 75, RI::Gas, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranVulture:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranFactory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranGoliath:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Needs(res, 1, RI::TerranArmory, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranFactory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranSiegeTankTankMode:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Needs(res, 1, RI::TerranMachineShop, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranFactory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranSCV:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranCommandCenter, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranWraith:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranScienceVessel:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 225, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranDropship:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranBattlecruiser:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Needs(res, 1, RI::TerranPhysicsLab, result, blocking);
					Consums(res, 400, RI::Minerals, result, blocking);
					Consums(res, 300, RI::Gas, result, blocking);
					Locks(res, 12, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranNuclearMissile:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranNuclearSilo, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 16, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranNuclearSilo, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranFirebat:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 25, RI::Gas, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranMedic:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 25, RI::Gas, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergZergling:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ZergHydralisk:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHydraliskDen, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					Consums(res, 25, RI::Gas, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ZergUltralisk:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergUltraliskCavern, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 8, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ZergDrone:
			switch(stage)
			{
				case 0:
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergOverlord:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergMutalisk:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ZergGuardian:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ZergGreaterSpire, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					return result;
				case 2:
					return result;
			}
		case OI::ZergQueen:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergQueensNest, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ZergDefiler:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergDefilerMound, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ZergScourge:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 25, RI::Minerals, result, blocking);
					Consums(res, 75, RI::Gas, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::ZergInfestedTerran:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergInfestedCommandCenter, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					return result;
				case 1:
					return result;
			}
		case OI::TerranValkyrie:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Needs(res, 1, RI::TerranArmory, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 125, RI::Gas, result, blocking);
					Locks(res, 6, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossCorsair:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossDarkTemplar:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 125, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergDevourer:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ZergGreaterSpire, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					return result;
				case 2:
					return result;
			}
		case OI::ProtossProbe:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossNexus, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossNexus, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossZealot:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossDragoon:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 125, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossHighTemplar:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossShuttle:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossScout:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Consums(res, 275, RI::Minerals, result, blocking);
					Consums(res, 125, RI::Gas, result, blocking);
					Locks(res, 6, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossArbiter:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Needs(res, 1, RI::ProtossArbiterTribunal, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 350, RI::Gas, result, blocking);
					Locks(res, 8, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossCarrier:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Needs(res, 1, RI::ProtossFleetBeacon, result, blocking);
					Consums(res, 350, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 12, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossReaver:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Needs(res, 1, RI::ProtossRoboticsSupportBay, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 8, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossObserver:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Needs(res, 1, RI::ProtossObservatory, result, blocking);
					Consums(res, 25, RI::Minerals, result, blocking);
					Consums(res, 75, RI::Gas, result, blocking);
					Locks(res, 2, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergLurker:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHydraliskDen, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					Consums(res, 25, RI::Gas, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Needs(res, 1, RI::LurkerAspect, result, blocking);
					return result;
				case 2:
					return result;
			}
		case OI::TerranCommandCenter:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 400, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranComsatStation:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranNuclearSilo:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Needs(res, 1, RI::TerranCovertOps, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranSupplyDepot:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranRefinery:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranBarracks:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranAcademy:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranFactory:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranStarport:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranControlTower:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranScienceFacility:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranCovertOps:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranPhysicsLab:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranMachineShop:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranFactory, result, blocking);
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranEngineeringBay:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Consums(res, 125, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranArmory:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranMissileTurret:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranEngineeringBay, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::TerranBunker:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergHatchery:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergLair:
			switch(stage)
			{
				case 0:
					Consums(res, 1, RI::ZergHatchery, result, blocking);
					Needs(res, 1, RI::ZergHatchery, result, blocking);
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergHive:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergLair, result, blocking);
					Needs(res, 1, RI::ZergLair, result, blocking);
					Needs(res, 1, RI::ZergQueensNest, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergNydusCanal:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergHydraliskDen:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergDefilerMound:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergGreaterSpire:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergQueensNest:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergEvolutionChamber:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHatchery, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergUltraliskCavern:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergSpire:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergSpawningPool:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHatchery, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergCreepColony:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ZergSporeColony:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					Needs(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					return result;
				case 4:
					return result;
				case 5:
					return result;
			}
		case OI::ZergSunkenColony:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					return result;
				case 4:
					return result;
				case 5:
					return result;
			}
		case OI::ZergExtractor:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossNexus:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 400, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossRoboticsFacility:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossPylon:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossAssimilator:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossObservatory:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossGateway:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossNexus, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossPhotonCannon:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossForge, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossCitadelofAdun:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossCyberneticsCore:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossTemplarArchives:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCitadelofAdun, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossForge:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossNexus, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossStargate:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossFleetBeacon:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossArbiterTribunal:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossRoboticsSupportBay:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::ProtossShieldBattery:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case OI::StimPacks:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Lockdown:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranCovertOps, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::EMPShockwave:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::SpiderMines:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranMachineShop, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TankSiegeMode:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranMachineShop, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Irradiate:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::YamatoGun:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranPhysicsLab, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::CloakingField:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranControlTower, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::PersonnelCloaking:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranCovertOps, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Burrowing:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergHatchery, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::SpawnBroodlings:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergQueensNest, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Plague:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergDefilerMound, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Consume:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergDefilerMound, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Ensnare:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergQueensNest, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::PsionicStorm:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Hallucination:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Recall:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossArbiterTribunal, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::StasisField:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossArbiterTribunal, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Restoration:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::DisruptionWeb:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossFleetBeacon, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::MindControl:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::OpticalFlare:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Maelstrom:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::LurkerAspect:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergHydraliskDen, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranInfantryArmor1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranEngineeringBay, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranInfantryArmor2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 175, RI::Minerals, result, blocking);
					Consums(res, 175, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranEngineeringBay, result, blocking);
					Needs(res, 1, RI::TerranInfantryArmor, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranInfantryArmor3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranEngineeringBay, result, blocking);
					Needs(res, 2, RI::TerranInfantryArmor, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranVehiclePlating1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranVehiclePlating2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 175, RI::Minerals, result, blocking);
					Consums(res, 175, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 1, RI::TerranVehiclePlating, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranVehiclePlating3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 2, RI::TerranVehiclePlating, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranShipPlating1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranShipPlating2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 225, RI::Minerals, result, blocking);
					Consums(res, 225, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 1, RI::TerranShipPlating, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranShipPlating3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					Consums(res, 300, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 2, RI::TerranShipPlating, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergCarapace1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergCarapace2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 225, RI::Minerals, result, blocking);
					Consums(res, 225, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Needs(res, 1, RI::ZergCarapace, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergCarapace3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					Consums(res, 300, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Needs(res, 2, RI::ZergCarapace, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergFlyerCarapace1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpire, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergFlyerCarapace2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 225, RI::Minerals, result, blocking);
					Consums(res, 225, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpire, result, blocking);
					Needs(res, 1, RI::ZergFlyerCarapace, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergFlyerCarapace3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					Consums(res, 300, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpire, result, blocking);
					Needs(res, 2, RI::ZergFlyerCarapace, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossGroundArmor1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossGroundArmor2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 175, RI::Minerals, result, blocking);
					Consums(res, 175, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					Needs(res, 1, RI::ProtossGroundArmor, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossGroundArmor3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					Needs(res, 2, RI::ProtossGroundArmor, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossAirArmor1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossAirArmor2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossFleetBeacon, result, blocking);
					Consums(res, 225, RI::Minerals, result, blocking);
					Consums(res, 225, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Needs(res, 1, RI::ProtossAirArmor, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossAirArmor3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossFleetBeacon, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					Consums(res, 300, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Needs(res, 2, RI::ProtossAirArmor, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranInfantryWeapons1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranEngineeringBay, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranInfantryWeapons2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 175, RI::Minerals, result, blocking);
					Consums(res, 175, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranEngineeringBay, result, blocking);
					Needs(res, 1, RI::TerranInfantryWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranInfantryWeapons3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranEngineeringBay, result, blocking);
					Needs(res, 2, RI::TerranInfantryWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranVehicleWeapons1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranVehicleWeapons2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 175, RI::Minerals, result, blocking);
					Consums(res, 175, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 1, RI::TerranVehicleWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranVehicleWeapons3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 2, RI::TerranVehicleWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranShipWeapons1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranShipWeapons2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 1, RI::TerranShipWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TerranShipWeapons3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranArmory, result, blocking);
					Needs(res, 2, RI::TerranShipWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergMeleeAttacks1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergMeleeAttacks2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Needs(res, 1, RI::ZergMeleeAttacks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergMeleeAttacks3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Needs(res, 2, RI::ZergMeleeAttacks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergMissileAttacks1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergMissileAttacks2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Needs(res, 1, RI::ZergMissileAttacks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergMissileAttacks3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Needs(res, 2, RI::ZergMissileAttacks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergFlyerAttacks1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpire, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergFlyerAttacks2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 175, RI::Minerals, result, blocking);
					Consums(res, 175, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpire, result, blocking);
					Needs(res, 1, RI::ZergFlyerAttacks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ZergFlyerAttacks3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpire, result, blocking);
					Needs(res, 2, RI::ZergFlyerAttacks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossGroundWeapons1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossGroundWeapons2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					Needs(res, 1, RI::ProtossGroundWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossGroundWeapons3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					Needs(res, 2, RI::ProtossGroundWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossAirWeapons1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossAirWeapons2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossFleetBeacon, result, blocking);
					Consums(res, 175, RI::Minerals, result, blocking);
					Consums(res, 175, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Needs(res, 1, RI::ProtossAirWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossAirWeapons3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossFleetBeacon, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Needs(res, 2, RI::ProtossAirWeapons, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossPlasmaShields1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossPlasmaShields2:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					Consums(res, 300, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					Needs(res, 1, RI::ProtossPlasmaShields, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ProtossPlasmaShields3:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 400, RI::Minerals, result, blocking);
					Consums(res, 400, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossForge, result, blocking);
					Needs(res, 2, RI::ProtossPlasmaShields, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::U_238Shells1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::IonThrusters1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranMachineShop, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::TitanReactor1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::OcularImplants1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranCovertOps, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::MoebiusReactor1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranCovertOps, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ApolloReactor1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranControlTower, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ColossusReactor1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranPhysicsLab, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::VentralSacs1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergLair, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::Antennae1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergLair, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::PneumatizedCarapace1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergLair, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::MetabolicBoost1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpawningPool, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::AdrenalGlands1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergSpawningPool, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::MuscularAugments1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergHydraliskDen, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::GroovedSpines1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergHydraliskDen, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::GameteMeiosis1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergQueensNest, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::MetasynapticNode1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergDefilerMound, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::SingularityCharge1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::LegEnhancements1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossCitadelofAdun, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ScarabDamage1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsSupportBay, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ReaverCapacity1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsSupportBay, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::GraviticDrive1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsSupportBay, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::SensorArray1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossObservatory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::GraviticBoosters1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossObservatory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::KhaydarinAmulet1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ApialSensors1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossFleetBeacon, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::GraviticThrusters1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossFleetBeacon, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::CarrierCapacity1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossFleetBeacon, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::KhaydarinCore1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossArbiterTribunal, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ArgusJewel1:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossFleetBeacon, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ArgusTalisman1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::CaduceusReactor1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::ChitinousPlating1:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergUltraliskCavern, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::AnabolicSynthesis1:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergUltraliskCavern, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case OI::CharonBoosters1:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranArmory, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranMachineShop, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		default:
			break;
	}
	return result;
}

void Operation::apply(Resources& res, const TimeInterval& interval, bool pushdecs) const
{
	TimeType applytime = scheduledtime_;
	switch(index_.getType())
	{
		case OI::SendTerranGasWorker:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					Locks(res, 1, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranGasWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 1:
				default:
					break;
			}
			break;
		case OI::ReturnTerranGasWorker:
			switch(stage_)
			{
				case 0:
					Consums(res, 1, RI::TerranGasWorker, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					applytime += 1;
				case 1:
				default:
					break;
			}
			break;
		case OI::SendProtossGasWorker:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					Locks(res, 1, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossGasWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 1:
				default:
					break;
			}
			break;
		case OI::ReturnProtossGasWorker:
			switch(stage_)
			{
				case 0:
					Consums(res, 1, RI::ProtossGasWorker, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					applytime += 1;
				case 1:
				default:
					break;
			}
			break;
		case OI::SendZergGasWorker:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Locks(res, 1, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergGasWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 1:
				default:
					break;
			}
			break;
		case OI::ReturnZergGasWorker:
			switch(stage_)
			{
				case 0:
					Consums(res, 1, RI::ZergGasWorker, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					applytime += 1;
				case 1:
				default:
					break;
			}
			break;
		case OI::TerranMarine:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 360;
				case 1:
					Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranGhost:
			switch(stage_)
			{
				case 0:
					Consums(res, 25, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 75, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
					Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranVulture:
			switch(stage_)
			{
				case 0:
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					applytime += 450;
				case 1:
					Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranGoliath:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranSiegeTankTankMode:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
					Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranSCV:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
					applytime += 300;
				case 1:
					Unlocks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranWraith:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 900;
				case 1:
					Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranScienceVessel:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 225, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranDropship:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
					Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranBattlecruiser:
			switch(stage_)
			{
				case 0:
					Consums(res, 400, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 300, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 12, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranNuclearMissile:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 16, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranNuclearSilo, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::TerranNuclearSilo, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranFirebat:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 25, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 360;
				case 1:
					Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranMedic:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 25, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 450;
				case 1:
					Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergZergling:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 420;
				case 1:
				default:
					break;
			}
			break;
		case OI::ZergHydralisk:
			switch(stage_)
			{
				case 0:
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 25, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 420;
				case 1:
				default:
					break;
			}
			break;
		case OI::ZergUltralisk:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 8, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 900;
				case 1:
				default:
					break;
			}
			break;
		case OI::ZergDrone:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 300;
				case 1:
					Prods(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergOverlord:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Prods(res, 16, RI::ZergSupply, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergMutalisk:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
				default:
					break;
			}
			break;
		case OI::ZergGuardian:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergQueen:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
				default:
					break;
			}
			break;
		case OI::ZergDefiler:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
				default:
					break;
			}
			break;
		case OI::ZergScourge:
			switch(stage_)
			{
				case 0:
					Consums(res, 25, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 75, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 450;
				case 1:
				default:
					break;
			}
			break;
		case OI::ZergInfestedTerran:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
				default:
					break;
			}
			break;
		case OI::TerranValkyrie:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 125, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 6, RI::TerranSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
					Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossCorsair:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossDarkTemplar:
			switch(stage_)
			{
				case 0:
					Consums(res, 125, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
					Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergDevourer:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossProbe:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 2, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
					applytime += 300;
				case 1:
					Unlocks(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossZealot:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossDragoon:
			switch(stage_)
			{
				case 0:
					Consums(res, 125, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
					Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossHighTemplar:
			switch(stage_)
			{
				case 0:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 750;
				case 1:
					Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossShuttle:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
					applytime += 900;
				case 1:
					Unlocks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossScout:
			switch(stage_)
			{
				case 0:
					Consums(res, 275, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 125, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 6, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossArbiter:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 350, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 8, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 2400;
				case 1:
					Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossCarrier:
			switch(stage_)
			{
				case 0:
					Consums(res, 350, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 12, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 2100;
				case 1:
					Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossReaver:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 8, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
					applytime += 1050;
				case 1:
					Unlocks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossObserver:
			switch(stage_)
			{
				case 0:
					Consums(res, 25, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 75, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::ProtossSupply, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergLurker:
			switch(stage_)
			{
				case 0:
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 25, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
					applytime += 420;
				case 1:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranCommandCenter:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 400, RI::Minerals, interval, applytime, pushdecs);
					applytime += 1800;
				case 2:
					Prods(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					Prods(res, 20, RI::TerranSupply, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranComsatStation:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranNuclearSilo:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranSupplyDepot:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					Prods(res, 16, RI::TerranSupply, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranRefinery:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					Prods(res, 3, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranBarracks:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					applytime += 1200;
				case 2:
					Prods(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranAcademy:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					applytime += 1200;
				case 2:
					Prods(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranFactory:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					applytime += 1200;
				case 2:
					Prods(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranStarport:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					applytime += 1050;
				case 2:
					Prods(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranControlTower:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranScienceFacility:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranCovertOps:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranPhysicsLab:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranMachineShop:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					applytime += 600;
				case 1:
					Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranEngineeringBay:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 125, RI::Minerals, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranArmory:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					applytime += 1200;
				case 2:
					Prods(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranMissileTurret:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					applytime += 450;
				case 2:
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::TerranBunker:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					applytime += 450;
				case 2:
					Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergHatchery:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
					applytime += 1800;
				case 2:
					Prods(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
					Prods(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergLair:
			switch(stage_)
			{
				case 0:
					Consums(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Prods(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					Prods(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergHive:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Prods(res, 1, RI::ZergHive, interval, applytime, pushdecs);
					Prods(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergNydusCanal:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergHydraliskDen:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					Prods(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergDefilerMound:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergGreaterSpire:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					applytime += 1800;
				case 2:
					Prods(res, 1, RI::ZergGreaterSpire, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergQueensNest:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergEvolutionChamber:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					Prods(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergUltraliskCavern:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					applytime += 1200;
				case 2:
					Prods(res, 1, RI::ZergUltraliskCavern, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergSpire:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					applytime += 1800;
				case 2:
					Prods(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergSpawningPool:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					applytime += 1200;
				case 2:
					Prods(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergCreepColony:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					applytime += 300;
				case 2:
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ZergSporeColony:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					applytime += 300;
				case 2:
					applytime += 1;
				case 3:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					applytime += 300;
				case 4:
					applytime += 1;
				case 5:
				default:
					break;
			}
			break;
		case OI::ZergSunkenColony:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
					applytime += 300;
				case 2:
					applytime += 1;
				case 3:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					applytime += 300;
				case 4:
					applytime += 1;
				case 5:
				default:
					break;
			}
			break;
		case OI::ZergExtractor:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
					Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					Prods(res, 3, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossNexus:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 400, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 1800;
				case 2:
					Prods(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
					Prods(res, 18, RI::ProtossSupply, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossRoboticsFacility:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 1200;
				case 2:
					Prods(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossPylon:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 450;
				case 2:
					Prods(res, 16, RI::ProtossSupply, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossAssimilator:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					Prods(res, 3, RI::GasWorkingPlaces, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossObservatory:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 450;
				case 2:
					Prods(res, 1, RI::ProtossObservatory, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossGateway:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossPhotonCannon:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 750;
				case 2:
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossCitadelofAdun:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ProtossCitadelofAdun, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossCyberneticsCore:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossTemplarArchives:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossForge:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 600;
				case 2:
					Prods(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossStargate:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 1050;
				case 2:
					Prods(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossFleetBeacon:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossArbiterTribunal:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 900;
				case 2:
					Prods(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossRoboticsSupportBay:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 450;
				case 2:
					Prods(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::ProtossShieldBattery:
			switch(stage_)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 45;
				case 1:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
					applytime += 450;
				case 2:
					applytime += 1;
				case 3:
				default:
					break;
			}
			break;
		case OI::StimPacks:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Lockdown:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::EMPShockwave:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::SpiderMines:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TankSiegeMode:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Irradiate:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::YamatoGun:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranPhysicsLab, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Unlocks(res, 1, RI::TerranPhysicsLab, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::CloakingField:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::PersonnelCloaking:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Burrowing:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::SpawnBroodlings:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Plague:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Consume:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Ensnare:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::PsionicStorm:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Hallucination:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Recall:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Unlocks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::StasisField:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Restoration:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::DisruptionWeb:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					applytime += 1200;
				case 1:
					Unlocks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::MindControl:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::OpticalFlare:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Maelstrom:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::LurkerAspect:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
					applytime += 1800;
				case 1:
					Prods(res, 1, RI::LurkerAspect, interval, applytime, pushdecs);
					Unlocks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranInfantryArmor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranInfantryArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranInfantryArmor2:
			switch(stage_)
			{
				case 0:
					Consums(res, 175, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 175, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranInfantryArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranInfantryArmor3:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranInfantryArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranVehiclePlating1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranVehiclePlating, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranVehiclePlating2:
			switch(stage_)
			{
				case 0:
					Consums(res, 175, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 175, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranVehiclePlating, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranVehiclePlating3:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranVehiclePlating, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranShipPlating1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranShipPlating, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranShipPlating2:
			switch(stage_)
			{
				case 0:
					Consums(res, 225, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 225, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranShipPlating, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranShipPlating3:
			switch(stage_)
			{
				case 0:
					Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 300, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranShipPlating, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergCarapace1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergCarapace, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergCarapace2:
			switch(stage_)
			{
				case 0:
					Consums(res, 225, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 225, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergCarapace, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergCarapace3:
			switch(stage_)
			{
				case 0:
					Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 300, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergCarapace, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergFlyerCarapace1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergFlyerCarapace, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergFlyerCarapace2:
			switch(stage_)
			{
				case 0:
					Consums(res, 225, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 225, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergFlyerCarapace, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergFlyerCarapace3:
			switch(stage_)
			{
				case 0:
					Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 300, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergFlyerCarapace, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossGroundArmor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossGroundArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossGroundArmor2:
			switch(stage_)
			{
				case 0:
					Consums(res, 175, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 175, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossGroundArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossGroundArmor3:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossGroundArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossAirArmor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossAirArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossAirArmor2:
			switch(stage_)
			{
				case 0:
					Consums(res, 225, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 225, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossAirArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossAirArmor3:
			switch(stage_)
			{
				case 0:
					Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 300, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossAirArmor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranInfantryWeapons1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranInfantryWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranInfantryWeapons2:
			switch(stage_)
			{
				case 0:
					Consums(res, 175, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 175, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranInfantryWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranInfantryWeapons3:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranInfantryWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranVehicleWeapons1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranVehicleWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranVehicleWeapons2:
			switch(stage_)
			{
				case 0:
					Consums(res, 175, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 175, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranVehicleWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranVehicleWeapons3:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranVehicleWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranShipWeapons1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranShipWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranShipWeapons2:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranShipWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TerranShipWeapons3:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
					Prods(res, 1, RI::TerranShipWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergMeleeAttacks1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergMeleeAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergMeleeAttacks2:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergMeleeAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergMeleeAttacks3:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergMeleeAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergMissileAttacks1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergMissileAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergMissileAttacks2:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergMissileAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergMissileAttacks3:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergMissileAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergFlyerAttacks1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergFlyerAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergFlyerAttacks2:
			switch(stage_)
			{
				case 0:
					Consums(res, 175, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 175, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergFlyerAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ZergFlyerAttacks3:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
					Prods(res, 1, RI::ZergFlyerAttacks, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossGroundWeapons1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossGroundWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossGroundWeapons2:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossGroundWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossGroundWeapons3:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossGroundWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossAirWeapons1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossAirWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossAirWeapons2:
			switch(stage_)
			{
				case 0:
					Consums(res, 175, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 175, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossAirWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossAirWeapons3:
			switch(stage_)
			{
				case 0:
					Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossAirWeapons, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossPlasmaShields1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4000;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossPlasmaShields, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossPlasmaShields2:
			switch(stage_)
			{
				case 0:
					Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 300, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4480;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossPlasmaShields, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ProtossPlasmaShields3:
			switch(stage_)
			{
				case 0:
					Consums(res, 400, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 400, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					applytime += 4960;
				case 1:
					Unlocks(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
					Prods(res, 1, RI::ProtossPlasmaShields, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::U_238Shells1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					Prods(res, 1, RI::U_238Shells, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::IonThrusters1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					Prods(res, 1, RI::IonThrusters, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::TitanReactor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
					Prods(res, 1, RI::TitanReactor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::OcularImplants1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					Prods(res, 1, RI::OcularImplants, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::MoebiusReactor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
					Prods(res, 1, RI::MoebiusReactor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ApolloReactor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
					Prods(res, 1, RI::ApolloReactor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ColossusReactor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranPhysicsLab, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::TerranPhysicsLab, interval, applytime, pushdecs);
					Prods(res, 1, RI::ColossusReactor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::VentralSacs1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					applytime += 2400;
				case 1:
					Unlocks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					Prods(res, 1, RI::VentralSacs, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::Antennae1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					Prods(res, 1, RI::Antennae, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::PneumatizedCarapace1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::ZergLair, interval, applytime, pushdecs);
					Prods(res, 1, RI::PneumatizedCarapace, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::MetabolicBoost1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
					Prods(res, 1, RI::MetabolicBoost, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::AdrenalGlands1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
					Prods(res, 1, RI::AdrenalGlands, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::MuscularAugments1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
					Prods(res, 1, RI::MuscularAugments, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::GroovedSpines1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
					Prods(res, 1, RI::GroovedSpines, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::GameteMeiosis1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
					Prods(res, 1, RI::GameteMeiosis, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::MetasynapticNode1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
					Prods(res, 1, RI::MetasynapticNode, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::SingularityCharge1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
					Prods(res, 1, RI::SingularityCharge, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::LegEnhancements1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossCitadelofAdun, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::ProtossCitadelofAdun, interval, applytime, pushdecs);
					Prods(res, 1, RI::LegEnhancements, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ScarabDamage1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::ScarabDamage, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ReaverCapacity1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::ReaverCapacity, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::GraviticDrive1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
					Prods(res, 1, RI::GraviticDrive, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::SensorArray1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossObservatory, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::ProtossObservatory, interval, applytime, pushdecs);
					Prods(res, 1, RI::SensorArray, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::GraviticBoosters1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossObservatory, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::ProtossObservatory, interval, applytime, pushdecs);
					Prods(res, 1, RI::GraviticBoosters, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::KhaydarinAmulet1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					Prods(res, 1, RI::KhaydarinAmulet, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ApialSensors1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					Prods(res, 1, RI::ApialSensors, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::GraviticThrusters1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					Prods(res, 1, RI::GraviticThrusters, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::CarrierCapacity1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					applytime += 1500;
				case 1:
					Unlocks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					Prods(res, 1, RI::CarrierCapacity, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::KhaydarinCore1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
					Prods(res, 1, RI::KhaydarinCore, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ArgusJewel1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
					Prods(res, 1, RI::ArgusJewel, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ArgusTalisman1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
					Prods(res, 1, RI::ArgusTalisman, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::CaduceusReactor1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					applytime += 2500;
				case 1:
					Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
					Prods(res, 1, RI::CaduceusReactor, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::ChitinousPlating1:
			switch(stage_)
			{
				case 0:
					Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergUltraliskCavern, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::ZergUltraliskCavern, interval, applytime, pushdecs);
					Prods(res, 1, RI::ChitinousPlating, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::AnabolicSynthesis1:
			switch(stage_)
			{
				case 0:
					Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::ZergUltraliskCavern, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::ZergUltraliskCavern, interval, applytime, pushdecs);
					Prods(res, 1, RI::AnabolicSynthesis, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		case OI::CharonBoosters1:
			switch(stage_)
			{
				case 0:
					Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
					Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
					Locks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					applytime += 2000;
				case 1:
					Unlocks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
					Prods(res, 1, RI::CharonBoosters, interval, applytime, pushdecs);
					applytime += 1;
				case 2:
				default:
					break;
			}
			break;
		default:
			break;
	}
}

