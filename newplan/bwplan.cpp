// This file is auto generated by BWPlanWriter.

#include "bwplan-internal.h"

std::string ResourceIndex::getName() const
{
	switch(index_)
	{
		case TerranWorker:
			return "TerranWorker";
		case ProtossWorker:
			return "ProtossWorker";
		case ZergWorker:
			return "ZergWorker";
		case TerranGasWorker:
			return "TerranGasWorker";
		case ProtossGasWorker:
			return "ProtossGasWorker";
		case ZergGasWorker:
			return "ZergGasWorker";
		case TerranSupply:
			return "TerranSupply";
		case ProtossSupply:
			return "ProtossSupply";
		case ZergSupply:
			return "ZergSupply";
		case GasWorkingPlaces:
			return "GasWorkingPlaces";
		case Larva:
			return "Larva";
		case Minerals:
			return "Minerals";
		case Gas:
			return "Gas";
		case TerranCommandCenter:
			return "TerranCommandCenter";
		case TerranComsatStation:
			return "TerranComsatStation";
		case TerranNuclearSilo:
			return "TerranNuclearSilo";
		case TerranBarracks:
			return "TerranBarracks";
		case TerranAcademy:
			return "TerranAcademy";
		case TerranFactory:
			return "TerranFactory";
		case TerranStarport:
			return "TerranStarport";
		case TerranControlTower:
			return "TerranControlTower";
		case TerranScienceFacility:
			return "TerranScienceFacility";
		case TerranCovertOps:
			return "TerranCovertOps";
		case TerranPhysicsLab:
			return "TerranPhysicsLab";
		case TerranMachineShop:
			return "TerranMachineShop";
		case TerranEngineeringBay:
			return "TerranEngineeringBay";
		case TerranArmory:
			return "TerranArmory";
		case ZergInfestedCommandCenter:
			return "ZergInfestedCommandCenter";
		case ZergHatchery:
			return "ZergHatchery";
		case ZergLair:
			return "ZergLair";
		case ZergHive:
			return "ZergHive";
		case ZergHydraliskDen:
			return "ZergHydraliskDen";
		case ZergDefilerMound:
			return "ZergDefilerMound";
		case ZergGreaterSpire:
			return "ZergGreaterSpire";
		case ZergQueensNest:
			return "ZergQueensNest";
		case ZergEvolutionChamber:
			return "ZergEvolutionChamber";
		case ZergUltraliskCavern:
			return "ZergUltraliskCavern";
		case ZergSpire:
			return "ZergSpire";
		case ZergSpawningPool:
			return "ZergSpawningPool";
		case ProtossNexus:
			return "ProtossNexus";
		case ProtossRoboticsFacility:
			return "ProtossRoboticsFacility";
		case ProtossObservatory:
			return "ProtossObservatory";
		case ProtossGateway:
			return "ProtossGateway";
		case ProtossCitadelofAdun:
			return "ProtossCitadelofAdun";
		case ProtossCyberneticsCore:
			return "ProtossCyberneticsCore";
		case ProtossTemplarArchives:
			return "ProtossTemplarArchives";
		case ProtossForge:
			return "ProtossForge";
		case ProtossStargate:
			return "ProtossStargate";
		case ProtossFleetBeacon:
			return "ProtossFleetBeacon";
		case ProtossArbiterTribunal:
			return "ProtossArbiterTribunal";
		case ProtossRoboticsSupportBay:
			return "ProtossRoboticsSupportBay";
		case TechStimPacks:
			return "TechStimPacks";
		case TechLockdown:
			return "TechLockdown";
		case TechEMPShockwave:
			return "TechEMPShockwave";
		case TechSpiderMines:
			return "TechSpiderMines";
		case TechTankSiegeMode:
			return "TechTankSiegeMode";
		case TechIrradiate:
			return "TechIrradiate";
		case TechYamatoGun:
			return "TechYamatoGun";
		case TechCloakingField:
			return "TechCloakingField";
		case TechPersonnelCloaking:
			return "TechPersonnelCloaking";
		case TechBurrowing:
			return "TechBurrowing";
		case TechSpawnBroodlings:
			return "TechSpawnBroodlings";
		case TechPlague:
			return "TechPlague";
		case TechConsume:
			return "TechConsume";
		case TechEnsnare:
			return "TechEnsnare";
		case TechPsionicStorm:
			return "TechPsionicStorm";
		case TechHallucination:
			return "TechHallucination";
		case TechRecall:
			return "TechRecall";
		case TechStasisField:
			return "TechStasisField";
		case TechRestoration:
			return "TechRestoration";
		case TechDisruptionWeb:
			return "TechDisruptionWeb";
		case TechMindControl:
			return "TechMindControl";
		case TechOpticalFlare:
			return "TechOpticalFlare";
		case TechMaelstrom:
			return "TechMaelstrom";
		case TechLurkerAspect:
			return "TechLurkerAspect";
		default:
			return "[UNKNOWN]";
	}
}

bool ResourceIndex::isLockable() const
{
	switch(index_)
	{
		case Larva:
		case Minerals:
		case Gas:
			return false;
		default:
			return true;
	}
}

bool ResourceIndex::isGrowthing() const
{
	switch(index_)
	{
		case Larva:
		case Minerals:
		case Gas:
			return true;
		default:
			return false;
	}
}

int ResourceIndex::getScaling() const
{
	switch(index_)
	{
		case Larva:
			return 240;
		case Minerals:
			return 1000;
		case Gas:
			return 1000;
		default:
			return 1;
	}
}

typedef ResourceIndex RI;

int Resources::getGrowth(const ResourceIndex& ri) const
{
	switch(index_)
	{
		case Larva:
			return 1 * amount[RI::ZergHatchery] + 1 * amount[RI::ZergLair] + 1 * amount[RI::ZergHive];
		case Minerals:
			return 45 * amount[RI::TerranWorker] + 45 * amount[RI::ProtossWorker] + 45 * amount[RI::ZergWorker];
		case Gas:
			return 45 * amount[RI::TerranGasWorker] + 45 * amount[RI::ProtossGasWorker] + 45 * amount[RI::ZergGasWorker];
		default:
			return 0;
	}
}

void Resources::advance(int dt)
{
	amount[RI::Larva] += dt * getGrowth(RI::Larva);
	amount[RI::Minerals] += dt * getGrowth(RI::Minerals);
	amount[RI::Gas] += dt * getGrowth(RI::Gas);
}

void Resources::inc(const ResourceIndex& ri, int optime, int value)
{
	switch(index_)
	{
		case TerranWorker:
			amount[RI::Minerals] += 45 * (optime - time);
			break;
		case ProtossWorker:
			amount[RI::Minerals] += 45 * (optime - time);
			break;
		case ZergWorker:
			amount[RI::Minerals] += 45 * (optime - time);
			break;
		case TerranGasWorker:
			amount[RI::Gas] += 45 * (optime - time);
			break;
		case ProtossGasWorker:
			amount[RI::Gas] += 45 * (optime - time);
			break;
		case ZergGasWorker:
			amount[RI::Gas] += 45 * (optime - time);
			break;
		case ZergHatchery:
			amount[RI::Larva] += 1 * (optime - time);
			break;
		case ZergLair:
			amount[RI::Larva] += 1 * (optime - time);
			break;
		case ZergHive:
			amount[RI::Larva] += 1 * (optime - time);
			break;
		default:
			break;
	}
	amount[ri.getIndex()] += value;
}

std::string OperationIndex::getName() const
{
	switch(index_)
	{
		case BuildTerranMarine:
			return "BuildTerranMarine";
		case BuildTerranGhost:
			return "BuildTerranGhost";
		case BuildTerranVulture:
			return "BuildTerranVulture";
		case BuildTerranGoliath:
			return "BuildTerranGoliath";
		case BuildTerranSiegeTankTankMode:
			return "BuildTerranSiegeTankTankMode";
		case BuildTerranSCV:
			return "BuildTerranSCV";
		case BuildTerranWraith:
			return "BuildTerranWraith";
		case BuildTerranScienceVessel:
			return "BuildTerranScienceVessel";
		case BuildTerranDropship:
			return "BuildTerranDropship";
		case BuildTerranBattlecruiser:
			return "BuildTerranBattlecruiser";
		case BuildTerranNuclearMissile:
			return "BuildTerranNuclearMissile";
		case BuildTerranFirebat:
			return "BuildTerranFirebat";
		case BuildTerranMedic:
			return "BuildTerranMedic";
		case BuildZergZergling:
			return "BuildZergZergling";
		case BuildZergHydralisk:
			return "BuildZergHydralisk";
		case BuildZergUltralisk:
			return "BuildZergUltralisk";
		case BuildZergDrone:
			return "BuildZergDrone";
		case BuildZergOverlord:
			return "BuildZergOverlord";
		case BuildZergMutalisk:
			return "BuildZergMutalisk";
		case BuildZergGuardian:
			return "BuildZergGuardian";
		case BuildZergQueen:
			return "BuildZergQueen";
		case BuildZergDefiler:
			return "BuildZergDefiler";
		case BuildZergScourge:
			return "BuildZergScourge";
		case BuildZergInfestedTerran:
			return "BuildZergInfestedTerran";
		case BuildTerranValkyrie:
			return "BuildTerranValkyrie";
		case BuildProtossCorsair:
			return "BuildProtossCorsair";
		case BuildProtossDarkTemplar:
			return "BuildProtossDarkTemplar";
		case BuildZergDevourer:
			return "BuildZergDevourer";
		case BuildProtossProbe:
			return "BuildProtossProbe";
		case BuildProtossZealot:
			return "BuildProtossZealot";
		case BuildProtossDragoon:
			return "BuildProtossDragoon";
		case BuildProtossHighTemplar:
			return "BuildProtossHighTemplar";
		case BuildProtossShuttle:
			return "BuildProtossShuttle";
		case BuildProtossScout:
			return "BuildProtossScout";
		case BuildProtossArbiter:
			return "BuildProtossArbiter";
		case BuildProtossCarrier:
			return "BuildProtossCarrier";
		case BuildProtossReaver:
			return "BuildProtossReaver";
		case BuildProtossObserver:
			return "BuildProtossObserver";
		case BuildZergLurker:
			return "BuildZergLurker";
		case BuildTerranCommandCenter:
			return "BuildTerranCommandCenter";
		case BuildTerranComsatStation:
			return "BuildTerranComsatStation";
		case BuildTerranNuclearSilo:
			return "BuildTerranNuclearSilo";
		case BuildTerranSupplyDepot:
			return "BuildTerranSupplyDepot";
		case BuildTerranRefinery:
			return "BuildTerranRefinery";
		case BuildTerranBarracks:
			return "BuildTerranBarracks";
		case BuildTerranAcademy:
			return "BuildTerranAcademy";
		case BuildTerranFactory:
			return "BuildTerranFactory";
		case BuildTerranStarport:
			return "BuildTerranStarport";
		case BuildTerranControlTower:
			return "BuildTerranControlTower";
		case BuildTerranScienceFacility:
			return "BuildTerranScienceFacility";
		case BuildTerranCovertOps:
			return "BuildTerranCovertOps";
		case BuildTerranPhysicsLab:
			return "BuildTerranPhysicsLab";
		case BuildTerranMachineShop:
			return "BuildTerranMachineShop";
		case BuildTerranEngineeringBay:
			return "BuildTerranEngineeringBay";
		case BuildTerranArmory:
			return "BuildTerranArmory";
		case BuildTerranMissileTurret:
			return "BuildTerranMissileTurret";
		case BuildTerranBunker:
			return "BuildTerranBunker";
		case BuildZergHatchery:
			return "BuildZergHatchery";
		case BuildZergLair:
			return "BuildZergLair";
		case BuildZergHive:
			return "BuildZergHive";
		case BuildZergNydusCanal:
			return "BuildZergNydusCanal";
		case BuildZergHydraliskDen:
			return "BuildZergHydraliskDen";
		case BuildZergDefilerMound:
			return "BuildZergDefilerMound";
		case BuildZergGreaterSpire:
			return "BuildZergGreaterSpire";
		case BuildZergQueensNest:
			return "BuildZergQueensNest";
		case BuildZergEvolutionChamber:
			return "BuildZergEvolutionChamber";
		case BuildZergUltraliskCavern:
			return "BuildZergUltraliskCavern";
		case BuildZergSpire:
			return "BuildZergSpire";
		case BuildZergSpawningPool:
			return "BuildZergSpawningPool";
		case BuildZergCreepColony:
			return "BuildZergCreepColony";
		case BuildZergSporeColony:
			return "BuildZergSporeColony";
		case BuildZergSunkenColony:
			return "BuildZergSunkenColony";
		case BuildZergExtractor:
			return "BuildZergExtractor";
		case BuildProtossNexus:
			return "BuildProtossNexus";
		case BuildProtossRoboticsFacility:
			return "BuildProtossRoboticsFacility";
		case BuildProtossPylon:
			return "BuildProtossPylon";
		case BuildProtossAssimilator:
			return "BuildProtossAssimilator";
		case BuildProtossObservatory:
			return "BuildProtossObservatory";
		case BuildProtossGateway:
			return "BuildProtossGateway";
		case BuildProtossPhotonCannon:
			return "BuildProtossPhotonCannon";
		case BuildProtossCitadelofAdun:
			return "BuildProtossCitadelofAdun";
		case BuildProtossCyberneticsCore:
			return "BuildProtossCyberneticsCore";
		case BuildProtossTemplarArchives:
			return "BuildProtossTemplarArchives";
		case BuildProtossForge:
			return "BuildProtossForge";
		case BuildProtossStargate:
			return "BuildProtossStargate";
		case BuildProtossFleetBeacon:
			return "BuildProtossFleetBeacon";
		case BuildProtossArbiterTribunal:
			return "BuildProtossArbiterTribunal";
		case BuildProtossRoboticsSupportBay:
			return "BuildProtossRoboticsSupportBay";
		case BuildProtossShieldBattery:
			return "BuildProtossShieldBattery";
		case TechStimPacks:
			return "TechStimPacks";
		case TechLockdown:
			return "TechLockdown";
		case TechEMPShockwave:
			return "TechEMPShockwave";
		case TechSpiderMines:
			return "TechSpiderMines";
		case TechTankSiegeMode:
			return "TechTankSiegeMode";
		case TechIrradiate:
			return "TechIrradiate";
		case TechYamatoGun:
			return "TechYamatoGun";
		case TechCloakingField:
			return "TechCloakingField";
		case TechPersonnelCloaking:
			return "TechPersonnelCloaking";
		case TechBurrowing:
			return "TechBurrowing";
		case TechSpawnBroodlings:
			return "TechSpawnBroodlings";
		case TechPlague:
			return "TechPlague";
		case TechConsume:
			return "TechConsume";
		case TechEnsnare:
			return "TechEnsnare";
		case TechPsionicStorm:
			return "TechPsionicStorm";
		case TechHallucination:
			return "TechHallucination";
		case TechRecall:
			return "TechRecall";
		case TechStasisField:
			return "TechStasisField";
		case TechRestoration:
			return "TechRestoration";
		case TechDisruptionWeb:
			return "TechDisruptionWeb";
		case TechMindControl:
			return "TechMindControl";
		case TechOpticalFlare:
			return "TechOpticalFlare";
		case TechMaelstrom:
			return "TechMaelstrom";
		case TechLurkerAspect:
			return "TechLurkerAspect";
		default:
			return "[UNKNOWN]";
	}
}

TimeType Operation::duration() const
{
	switch(index_)
	{
		case BuildTerranMarine:
			return 361;
		case BuildTerranGhost:
			return 751;
		case BuildTerranVulture:
			return 451;
		case BuildTerranGoliath:
			return 601;
		case BuildTerranSiegeTankTankMode:
			return 751;
		case BuildTerranSCV:
			return 301;
		case BuildTerranWraith:
			return 901;
		case BuildTerranScienceVessel:
			return 1201;
		case BuildTerranDropship:
			return 751;
		case BuildTerranBattlecruiser:
			return 2001;
		case BuildTerranNuclearMissile:
			return 1501;
		case BuildTerranFirebat:
			return 361;
		case BuildTerranMedic:
			return 451;
		case BuildZergZergling:
			return 420;
		case BuildZergHydralisk:
			return 420;
		case BuildZergUltralisk:
			return 900;
		case BuildZergDrone:
			return 301;
		case BuildZergOverlord:
			return 601;
		case BuildZergMutalisk:
			return 600;
		case BuildZergGuardian:
			return 600;
		case BuildZergQueen:
			return 750;
		case BuildZergDefiler:
			return 750;
		case BuildZergScourge:
			return 450;
		case BuildZergInfestedTerran:
			return 600;
		case BuildTerranValkyrie:
			return 751;
		case BuildProtossCorsair:
			return 601;
		case BuildProtossDarkTemplar:
			return 751;
		case BuildZergDevourer:
			return 600;
		case BuildProtossProbe:
			return 301;
		case BuildProtossZealot:
			return 601;
		case BuildProtossDragoon:
			return 751;
		case BuildProtossHighTemplar:
			return 751;
		case BuildProtossShuttle:
			return 901;
		case BuildProtossScout:
			return 1201;
		case BuildProtossArbiter:
			return 2401;
		case BuildProtossCarrier:
			return 2101;
		case BuildProtossReaver:
			return 1051;
		case BuildProtossObserver:
			return 601;
		case BuildZergLurker:
			return 600;
		case BuildTerranCommandCenter:
			return 1846;
		case BuildTerranComsatStation:
			return 601;
		case BuildTerranNuclearSilo:
			return 1201;
		case BuildTerranSupplyDepot:
			return 646;
		case BuildTerranRefinery:
			return 646;
		case BuildTerranBarracks:
			return 1246;
		case BuildTerranAcademy:
			return 1246;
		case BuildTerranFactory:
			return 1246;
		case BuildTerranStarport:
			return 1096;
		case BuildTerranControlTower:
			return 601;
		case BuildTerranScienceFacility:
			return 946;
		case BuildTerranCovertOps:
			return 601;
		case BuildTerranPhysicsLab:
			return 601;
		case BuildTerranMachineShop:
			return 601;
		case BuildTerranEngineeringBay:
			return 946;
		case BuildTerranArmory:
			return 1246;
		case BuildTerranMissileTurret:
			return 496;
		case BuildTerranBunker:
			return 496;
		case BuildZergHatchery:
			return 1846;
		case BuildZergLair:
			return 1546;
		case BuildZergHive:
			return 1846;
		case BuildZergNydusCanal:
			return 646;
		case BuildZergHydraliskDen:
			return 646;
		case BuildZergDefilerMound:
			return 946;
		case BuildZergGreaterSpire:
			return 1846;
		case BuildZergQueensNest:
			return 946;
		case BuildZergEvolutionChamber:
			return 646;
		case BuildZergUltraliskCavern:
			return 1246;
		case BuildZergSpire:
			return 1846;
		case BuildZergSpawningPool:
			return 1246;
		case BuildZergCreepColony:
			return 346;
		case BuildZergSporeColony:
			return 346;
		case BuildZergSunkenColony:
			return 346;
		case BuildZergExtractor:
			return 646;
		case BuildProtossNexus:
			return 1846;
		case BuildProtossRoboticsFacility:
			return 1246;
		case BuildProtossPylon:
			return 496;
		case BuildProtossAssimilator:
			return 646;
		case BuildProtossObservatory:
			return 496;
		case BuildProtossGateway:
			return 946;
		case BuildProtossPhotonCannon:
			return 796;
		case BuildProtossCitadelofAdun:
			return 946;
		case BuildProtossCyberneticsCore:
			return 946;
		case BuildProtossTemplarArchives:
			return 946;
		case BuildProtossForge:
			return 646;
		case BuildProtossStargate:
			return 1096;
		case BuildProtossFleetBeacon:
			return 946;
		case BuildProtossArbiterTribunal:
			return 946;
		case BuildProtossRoboticsSupportBay:
			return 496;
		case BuildProtossShieldBattery:
			return 496;
		case TechStimPacks:
			return 1201;
		case TechLockdown:
			return 1501;
		case TechEMPShockwave:
			return 1801;
		case TechSpiderMines:
			return 1201;
		case TechTankSiegeMode:
			return 1201;
		case TechIrradiate:
			return 1201;
		case TechYamatoGun:
			return 1801;
		case TechCloakingField:
			return 1501;
		case TechPersonnelCloaking:
			return 1201;
		case TechBurrowing:
			return 1201;
		case TechSpawnBroodlings:
			return 1201;
		case TechPlague:
			return 1501;
		case TechConsume:
			return 1501;
		case TechEnsnare:
			return 1201;
		case TechPsionicStorm:
			return 1801;
		case TechHallucination:
			return 1201;
		case TechRecall:
			return 1801;
		case TechStasisField:
			return 1501;
		case TechRestoration:
			return 1201;
		case TechDisruptionWeb:
			return 1201;
		case TechMindControl:
			return 1801;
		case TechOpticalFlare:
			return 1801;
		case TechMaelstrom:
			return 1501;
		case TechLurkerAspect:
			return 1801;
		default:
			return 0;
	}
}

int Operation::stageCount() const
{
	switch(index_)
	{
		case BuildTerranMarine:
			return 2;
		case BuildTerranGhost:
			return 2;
		case BuildTerranVulture:
			return 2;
		case BuildTerranGoliath:
			return 2;
		case BuildTerranSiegeTankTankMode:
			return 2;
		case BuildTerranSCV:
			return 2;
		case BuildTerranWraith:
			return 2;
		case BuildTerranScienceVessel:
			return 2;
		case BuildTerranDropship:
			return 2;
		case BuildTerranBattlecruiser:
			return 2;
		case BuildTerranNuclearMissile:
			return 2;
		case BuildTerranFirebat:
			return 2;
		case BuildTerranMedic:
			return 2;
		case BuildZergZergling:
			return 1;
		case BuildZergHydralisk:
			return 1;
		case BuildZergUltralisk:
			return 1;
		case BuildZergDrone:
			return 2;
		case BuildZergOverlord:
			return 2;
		case BuildZergMutalisk:
			return 1;
		case BuildZergGuardian:
			return 1;
		case BuildZergQueen:
			return 1;
		case BuildZergDefiler:
			return 1;
		case BuildZergScourge:
			return 1;
		case BuildZergInfestedTerran:
			return 1;
		case BuildTerranValkyrie:
			return 2;
		case BuildProtossCorsair:
			return 2;
		case BuildProtossDarkTemplar:
			return 2;
		case BuildZergDevourer:
			return 1;
		case BuildProtossProbe:
			return 2;
		case BuildProtossZealot:
			return 2;
		case BuildProtossDragoon:
			return 2;
		case BuildProtossHighTemplar:
			return 2;
		case BuildProtossShuttle:
			return 2;
		case BuildProtossScout:
			return 2;
		case BuildProtossArbiter:
			return 2;
		case BuildProtossCarrier:
			return 2;
		case BuildProtossReaver:
			return 2;
		case BuildProtossObserver:
			return 2;
		case BuildZergLurker:
			return 1;
		case BuildTerranCommandCenter:
			return 3;
		case BuildTerranComsatStation:
			return 2;
		case BuildTerranNuclearSilo:
			return 2;
		case BuildTerranSupplyDepot:
			return 3;
		case BuildTerranRefinery:
			return 3;
		case BuildTerranBarracks:
			return 3;
		case BuildTerranAcademy:
			return 3;
		case BuildTerranFactory:
			return 3;
		case BuildTerranStarport:
			return 3;
		case BuildTerranControlTower:
			return 2;
		case BuildTerranScienceFacility:
			return 3;
		case BuildTerranCovertOps:
			return 2;
		case BuildTerranPhysicsLab:
			return 2;
		case BuildTerranMachineShop:
			return 2;
		case BuildTerranEngineeringBay:
			return 3;
		case BuildTerranArmory:
			return 3;
		case BuildTerranMissileTurret:
			return 3;
		case BuildTerranBunker:
			return 3;
		case BuildZergHatchery:
			return 3;
		case BuildZergLair:
			return 3;
		case BuildZergHive:
			return 3;
		case BuildZergNydusCanal:
			return 3;
		case BuildZergHydraliskDen:
			return 3;
		case BuildZergDefilerMound:
			return 3;
		case BuildZergGreaterSpire:
			return 3;
		case BuildZergQueensNest:
			return 3;
		case BuildZergEvolutionChamber:
			return 3;
		case BuildZergUltraliskCavern:
			return 3;
		case BuildZergSpire:
			return 3;
		case BuildZergSpawningPool:
			return 3;
		case BuildZergCreepColony:
			return 3;
		case BuildZergSporeColony:
			return 3;
		case BuildZergSunkenColony:
			return 3;
		case BuildZergExtractor:
			return 3;
		case BuildProtossNexus:
			return 3;
		case BuildProtossRoboticsFacility:
			return 3;
		case BuildProtossPylon:
			return 3;
		case BuildProtossAssimilator:
			return 3;
		case BuildProtossObservatory:
			return 3;
		case BuildProtossGateway:
			return 3;
		case BuildProtossPhotonCannon:
			return 3;
		case BuildProtossCitadelofAdun:
			return 3;
		case BuildProtossCyberneticsCore:
			return 3;
		case BuildProtossTemplarArchives:
			return 3;
		case BuildProtossForge:
			return 3;
		case BuildProtossStargate:
			return 3;
		case BuildProtossFleetBeacon:
			return 3;
		case BuildProtossArbiterTribunal:
			return 3;
		case BuildProtossRoboticsSupportBay:
			return 3;
		case BuildProtossShieldBattery:
			return 3;
		case TechStimPacks:
			return 2;
		case TechLockdown:
			return 2;
		case TechEMPShockwave:
			return 2;
		case TechSpiderMines:
			return 2;
		case TechTankSiegeMode:
			return 2;
		case TechIrradiate:
			return 2;
		case TechYamatoGun:
			return 2;
		case TechCloakingField:
			return 2;
		case TechPersonnelCloaking:
			return 2;
		case TechBurrowing:
			return 2;
		case TechSpawnBroodlings:
			return 2;
		case TechPlague:
			return 2;
		case TechConsume:
			return 2;
		case TechEnsnare:
			return 2;
		case TechPsionicStorm:
			return 2;
		case TechHallucination:
			return 2;
		case TechRecall:
			return 2;
		case TechStasisField:
			return 2;
		case TechRestoration:
			return 2;
		case TechDisruptionWeb:
			return 2;
		case TechMindControl:
			return 2;
		case TechOpticalFlare:
			return 2;
		case TechMaelstrom:
			return 2;
		case TechLurkerAspect:
			return 2;
		default:
			return 0;
	}
}

TimeType Operations::stageDuration(int stage) const
{
	switch(index_)
	{
		case BuildTerranMarine:
			switch(stage)
			{
				case 0:
					return 360;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranGhost:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranVulture:
			switch(stage)
			{
				case 0:
					return 450;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranGoliath:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranSiegeTankTankMode:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranSCV:
			switch(stage)
			{
				case 0:
					return 300;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranWraith:
			switch(stage)
			{
				case 0:
					return 900;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranScienceVessel:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranDropship:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranBattlecruiser:
			switch(stage)
			{
				case 0:
					return 2000;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranNuclearMissile:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranFirebat:
			switch(stage)
			{
				case 0:
					return 360;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranMedic:
			switch(stage)
			{
				case 0:
					return 450;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildZergZergling:
			switch(stage)
			{
				case 0:
					return 420;
				default:
					return 0;
			}
		case BuildZergHydralisk:
			switch(stage)
			{
				case 0:
					return 420;
				default:
					return 0;
			}
		case BuildZergUltralisk:
			switch(stage)
			{
				case 0:
					return 900;
				default:
					return 0;
			}
		case BuildZergDrone:
			switch(stage)
			{
				case 0:
					return 300;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildZergOverlord:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildZergMutalisk:
			switch(stage)
			{
				case 0:
					return 600;
				default:
					return 0;
			}
		case BuildZergGuardian:
			switch(stage)
			{
				case 0:
					return 600;
				default:
					return 0;
			}
		case BuildZergQueen:
			switch(stage)
			{
				case 0:
					return 750;
				default:
					return 0;
			}
		case BuildZergDefiler:
			switch(stage)
			{
				case 0:
					return 750;
				default:
					return 0;
			}
		case BuildZergScourge:
			switch(stage)
			{
				case 0:
					return 450;
				default:
					return 0;
			}
		case BuildZergInfestedTerran:
			switch(stage)
			{
				case 0:
					return 600;
				default:
					return 0;
			}
		case BuildTerranValkyrie:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossCorsair:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossDarkTemplar:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildZergDevourer:
			switch(stage)
			{
				case 0:
					return 600;
				default:
					return 0;
			}
		case BuildProtossProbe:
			switch(stage)
			{
				case 0:
					return 300;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossZealot:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossDragoon:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossHighTemplar:
			switch(stage)
			{
				case 0:
					return 750;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossShuttle:
			switch(stage)
			{
				case 0:
					return 900;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossScout:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossArbiter:
			switch(stage)
			{
				case 0:
					return 2400;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossCarrier:
			switch(stage)
			{
				case 0:
					return 2100;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossReaver:
			switch(stage)
			{
				case 0:
					return 1050;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildProtossObserver:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildZergLurker:
			switch(stage)
			{
				case 0:
					return 600;
				default:
					return 0;
			}
		case BuildTerranCommandCenter:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranComsatStation:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranNuclearSilo:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranSupplyDepot:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranRefinery:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranBarracks:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranAcademy:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranFactory:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranStarport:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1050;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranControlTower:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranScienceFacility:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranCovertOps:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranPhysicsLab:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranMachineShop:
			switch(stage)
			{
				case 0:
					return 600;
				case 1:
					return 1;
				default:
					return 0;
			}
		case BuildTerranEngineeringBay:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranArmory:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranMissileTurret:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildTerranBunker:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergHatchery:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergLair:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1500;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergHive:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergNydusCanal:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergHydraliskDen:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergDefilerMound:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergGreaterSpire:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergQueensNest:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergEvolutionChamber:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergUltraliskCavern:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergSpire:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergSpawningPool:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergCreepColony:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 300;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergSporeColony:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 300;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergSunkenColony:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 300;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildZergExtractor:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossNexus:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1800;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossRoboticsFacility:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1200;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossPylon:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossAssimilator:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossObservatory:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossGateway:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossPhotonCannon:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 750;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossCitadelofAdun:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossCyberneticsCore:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossTemplarArchives:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossForge:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 600;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossStargate:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 1050;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossFleetBeacon:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossArbiterTribunal:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 900;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossRoboticsSupportBay:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case BuildProtossShieldBattery:
			switch(stage)
			{
				case 0:
					return 45;
				case 1:
					return 450;
				case 2:
					return 1;
				default:
					return 0;
			}
		case TechStimPacks:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechLockdown:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechEMPShockwave:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechSpiderMines:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechTankSiegeMode:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechIrradiate:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechYamatoGun:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechCloakingField:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechPersonnelCloaking:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechBurrowing:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechSpawnBroodlings:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechPlague:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechConsume:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechEnsnare:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechPsionicStorm:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechHallucination:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechRecall:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechStasisField:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechRestoration:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechDisruptionWeb:
			switch(stage)
			{
				case 0:
					return 1200;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechMindControl:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechOpticalFlare:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechMaelstrom:
			switch(stage)
			{
				case 0:
					return 1500;
				case 1:
					return 1;
				default:
					return 0;
			}
		case TechLurkerAspect:
			switch(stage)
			{
				case 0:
					return 1800;
				case 1:
					return 1;
				default:
					return 0;
			}
		default:
			return 0;
	}
}

void Operations::execute(bool justactived)
{
	switch(index_)
	{
		case BuildTerranMarine:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranGhost:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranVulture:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranGoliath:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranSiegeTankTankMode:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranSCV:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranWraith:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranScienceVessel:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranDropship:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranBattlecruiser:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranNuclearMissile:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranFirebat:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildTerranMedic:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildZergZergling:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergHydralisk:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergUltralisk:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergDrone:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildZergOverlord:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildZergMutalisk:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergGuardian:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergQueen:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergDefiler:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergScourge:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildZergInfestedTerran:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildTerranValkyrie:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossCorsair:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossDarkTemplar:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildZergDevourer:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildProtossProbe:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossZealot:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossDragoon:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossHighTemplar:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossShuttle:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossScout:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossArbiter:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossCarrier:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossReaver:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildProtossObserver:
			switch(stage)
			{
				case 0:
					Call(CTrainUnit, this); break;
				case 1:
					Call(CUnitFinished, this); break;
			}
		case BuildZergLurker:
			switch(stage)
			{
				case 0:
					Call(CMorphUnit, this); break;
			}
		case BuildTerranCommandCenter:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranComsatStation:
			switch(stage)
			{
				case 0:
					Call(CBuildAddon, this); break;
				case 1:
					Call(CBuildAddonFinished, this); break;
			}
		case BuildTerranNuclearSilo:
			switch(stage)
			{
				case 0:
					Call(CBuildAddon, this); break;
				case 1:
					Call(CBuildAddonFinished, this); break;
			}
		case BuildTerranSupplyDepot:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranRefinery:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranBarracks:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranAcademy:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranFactory:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranStarport:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranControlTower:
			switch(stage)
			{
				case 0:
					Call(CBuildAddon, this); break;
				case 1:
					Call(CBuildAddonFinished, this); break;
			}
		case BuildTerranScienceFacility:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranCovertOps:
			switch(stage)
			{
				case 0:
					Call(CBuildAddon, this); break;
				case 1:
					Call(CBuildAddonFinished, this); break;
			}
		case BuildTerranPhysicsLab:
			switch(stage)
			{
				case 0:
					Call(CBuildAddon, this); break;
				case 1:
					Call(CBuildAddonFinished, this); break;
			}
		case BuildTerranMachineShop:
			switch(stage)
			{
				case 0:
					Call(CBuildAddon, this); break;
				case 1:
					Call(CBuildAddonFinished, this); break;
			}
		case BuildTerranEngineeringBay:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranArmory:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranMissileTurret:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildTerranBunker:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergHatchery:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergLair:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergHive:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergNydusCanal:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergHydraliskDen:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergDefilerMound:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergGreaterSpire:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergQueensNest:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergEvolutionChamber:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergUltraliskCavern:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergSpire:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergSpawningPool:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergCreepColony:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergSporeColony:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergSunkenColony:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildZergExtractor:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossNexus:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossRoboticsFacility:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossPylon:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossAssimilator:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossObservatory:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossGateway:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossPhotonCannon:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossCitadelofAdun:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossCyberneticsCore:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossTemplarArchives:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossForge:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossStargate:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossFleetBeacon:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossArbiterTribunal:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossRoboticsSupportBay:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case BuildProtossShieldBattery:
			switch(stage)
			{
				case 0:
					Call(CSendWorkerToBuildingPlace, this); break;
				case 1:
					Call(CBuildBuilding, this); break;
				case 2:
					Call(CBuildingFinished, this); break;
			}
		case TechStimPacks:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechLockdown:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechEMPShockwave:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechSpiderMines:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechTankSiegeMode:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechIrradiate:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechYamatoGun:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechCloakingField:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechPersonnelCloaking:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechBurrowing:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechSpawnBroodlings:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechPlague:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechConsume:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechEnsnare:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechPsionicStorm:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechHallucination:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechRecall:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechStasisField:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechRestoration:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechDisruptionWeb:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechMindControl:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechOpticalFlare:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechMaelstrom:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
		case TechLurkerAspect:
			switch(stage)
			{
				case 0:
					Call(CTechStart, this); break;
				case 1:
					Call(CTechFinished, this); break;
			}
	}
}

TimeType Operation::firstApplyableAt(const ResourcesType& res, int stage, ResIndexType& blocking) const
{
	TimeType result = 0;
	switch(index_)
	{
		case BuildTerranMarine:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranGhost:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Needs(res, 1, RI::TerranCovertOps, result, blocking);
					Consums(res, 25, RI::Minerals, result, blocking);
					Consums(res, 75, RI::Gas, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranVulture:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranFactory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranGoliath:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Needs(res, 1, RI::TerranArmory, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranFactory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranSiegeTankTankMode:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Needs(res, 1, RI::TerranMachineShop, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranFactory, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranSCV:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranCommandCenter, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranWraith:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranScienceVessel:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 225, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranDropship:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranBattlecruiser:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Needs(res, 1, RI::TerranPhysicsLab, result, blocking);
					Consums(res, 400, RI::Minerals, result, blocking);
					Consums(res, 300, RI::Gas, result, blocking);
					Locks(res, 12, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranNuclearMissile:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranNuclearSilo, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 16, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranNuclearSilo, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranFirebat:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 25, RI::Gas, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranMedic:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 25, RI::Gas, result, blocking);
					Locks(res, 2, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranBarracks, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildZergZergling:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergHydralisk:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergHydraliskDen, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					Consums(res, 25, RI::Gas, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergUltralisk:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergUltraliskCavern, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 8, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergDrone:
			switch(stage)
			{
				case 0:
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildZergOverlord:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildZergMutalisk:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergGuardian:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergGreaterSpire, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergQueen:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergQueensNest, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergDefiler:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergDefilerMound, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergScourge:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 25, RI::Minerals, result, blocking);
					Consums(res, 75, RI::Gas, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					Consums(res, 1, RI::Larva, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildZergInfestedTerran:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergInfestedCommandCenter, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 2, RI::ZergSupply, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildTerranValkyrie:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranControlTower, result, blocking);
					Needs(res, 1, RI::TerranArmory, result, blocking);
					Consums(res, 250, RI::Minerals, result, blocking);
					Consums(res, 125, RI::Gas, result, blocking);
					Locks(res, 6, RI::TerranSupply, result, blocking);
					Locks(res, 1, RI::TerranStarport, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossCorsair:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossDarkTemplar:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 125, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildZergDevourer:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ZergGreaterSpire, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildProtossProbe:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossNexus, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Locks(res, 2, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossNexus, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossZealot:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossDragoon:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 125, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossHighTemplar:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossGateway, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossShuttle:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Locks(res, 4, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossScout:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Consums(res, 275, RI::Minerals, result, blocking);
					Consums(res, 125, RI::Gas, result, blocking);
					Locks(res, 6, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossArbiter:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Needs(res, 1, RI::ProtossArbiterTribunal, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 350, RI::Gas, result, blocking);
					Locks(res, 8, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossCarrier:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Needs(res, 1, RI::ProtossFleetBeacon, result, blocking);
					Consums(res, 350, RI::Minerals, result, blocking);
					Consums(res, 250, RI::Gas, result, blocking);
					Locks(res, 12, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossStargate, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossReaver:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Needs(res, 1, RI::ProtossRoboticsSupportBay, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 8, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildProtossObserver:
			switch(stage)
			{
				case 0:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Needs(res, 1, RI::ProtossObservatory, result, blocking);
					Consums(res, 25, RI::Minerals, result, blocking);
					Consums(res, 75, RI::Gas, result, blocking);
					Locks(res, 2, RI::ProtossSupply, result, blocking);
					Locks(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildZergLurker:
			switch(stage)
			{
				case 0:
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 4, RI::ZergSupply, result, blocking);
					Needs(res, 1, RI::TechLurkerAspect, result, blocking);
					return result;
				case 1:
					return result;
			}
		case BuildTerranCommandCenter:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 400, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranComsatStation:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranAcademy, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranNuclearSilo:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Needs(res, 1, RI::TerranCovertOps, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranSupplyDepot:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranRefinery:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranBarracks:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranAcademy:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranFactory:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranStarport:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranControlTower:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranStarport, result, blocking);
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranScienceFacility:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranStarport, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranCovertOps:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranPhysicsLab:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					Needs(res, 1, RI::TerranScienceFacility, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranMachineShop:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranFactory, result, blocking);
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case BuildTerranEngineeringBay:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranCommandCenter, result, blocking);
					Consums(res, 125, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranArmory:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranFactory, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranMissileTurret:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranEngineeringBay, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildTerranBunker:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::TerranWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::TerranBarracks, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergHatchery:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergLair:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHatchery, result, blocking);
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergHive:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergLair, result, blocking);
					Needs(res, 1, RI::ZergQueensNest, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergNydusCanal:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergHydraliskDen:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 50, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergDefilerMound:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergGreaterSpire:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergSpire, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergQueensNest:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergEvolutionChamber:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHatchery, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergUltraliskCavern:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHive, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergSpire:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergLair, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergSpawningPool:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergHatchery, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergCreepColony:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 75, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergSporeColony:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergEvolutionChamber, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergSunkenColony:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Needs(res, 1, RI::ZergSpawningPool, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildZergExtractor:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ZergWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 1, RI::ZergWorker, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossNexus:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 400, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossRoboticsFacility:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossPylon:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossAssimilator:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossObservatory:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Consums(res, 50, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossGateway:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossNexus, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossPhotonCannon:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossForge, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossCitadelofAdun:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossCyberneticsCore:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossTemplarArchives:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCitadelofAdun, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossForge:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossNexus, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossStargate:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossCyberneticsCore, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossFleetBeacon:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossStargate, result, blocking);
					Consums(res, 300, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossArbiterTribunal:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossTemplarArchives, result, blocking);
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossRoboticsSupportBay:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossRoboticsFacility, result, blocking);
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case BuildProtossShieldBattery:
			switch(stage)
			{
				case 0:
					Locks(res, 1, RI::ProtossWorker, result, blocking);
					return result;
				case 1:
					Needs(res, 1, RI::ProtossGateway, result, blocking);
					Consums(res, 100, RI::Minerals, result, blocking);
					return result;
				case 2:
					return result;
				case 3:
					return result;
			}
		case TechStimPacks:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechLockdown:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranCovertOps, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechEMPShockwave:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechSpiderMines:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranMachineShop, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechTankSiegeMode:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranMachineShop, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechIrradiate:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranScienceFacility, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechYamatoGun:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranPhysicsLab, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechCloakingField:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranControlTower, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechPersonnelCloaking:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranCovertOps, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechBurrowing:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergHatchery, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechSpawnBroodlings:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergQueensNest, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechPlague:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergDefilerMound, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechConsume:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergDefilerMound, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechEnsnare:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergQueensNest, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechPsionicStorm:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechHallucination:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechRecall:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossArbiterTribunal, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechStasisField:
			switch(stage)
			{
				case 0:
					Consums(res, 150, RI::Minerals, result, blocking);
					Consums(res, 150, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossArbiterTribunal, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechRestoration:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechDisruptionWeb:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossFleetBeacon, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechMindControl:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechOpticalFlare:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::TerranAcademy, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechMaelstrom:
			switch(stage)
			{
				case 0:
					Consums(res, 100, RI::Minerals, result, blocking);
					Consums(res, 100, RI::Gas, result, blocking);
					Locks(res, 1, RI::ProtossTemplarArchives, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
		case TechLurkerAspect:
			switch(stage)
			{
				case 0:
					Consums(res, 200, RI::Minerals, result, blocking);
					Consums(res, 200, RI::Gas, result, blocking);
					Locks(res, 1, RI::ZergHydraliskDen, result, blocking);
					return result;
				case 1:
					return result;
				case 2:
					return result;
			}
	}
	return result;
}

void Operation::apply(ResourcesType& res, const TimeInterval& interval, bool pushdecs = false) const
{
	TimeType applytime = scheduledtime_;
	switch(index_)
	{
		case BuildTerranMarine:
			Needs(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 360;
			Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranGhost:
			Needs(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
			Consums(res, 25, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 75, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 750;
			Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranVulture:
			Needs(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			applytime += 450;
			Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranGoliath:
			Needs(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranSiegeTankTankMode:
			Needs(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			applytime += 750;
			Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranSCV:
			Needs(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			applytime += 300;
			Unlocks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Prods(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranWraith:
			Needs(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 900;
			Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranScienceVessel:
			Needs(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 225, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 1200;
			Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranDropship:
			Needs(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 750;
			Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranBattlecruiser:
			Needs(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranPhysicsLab, interval, applytime, pushdecs);
			Consums(res, 400, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 300, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 12, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 2000;
			Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranNuclearMissile:
			Needs(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranNuclearSilo, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 16, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranNuclearSilo, interval, applytime, pushdecs);
			applytime += 1500;
			Unlocks(res, 1, RI::TerranNuclearSilo, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranFirebat:
			Needs(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 25, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 360;
			Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranMedic:
			Needs(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 25, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 2, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 450;
			Unlocks(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergZergling:
			Needs(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 420;
			break;
		case BuildZergHydralisk:
			Needs(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
			Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 25, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 420;
			break;
		case BuildZergUltralisk:
			Needs(res, 1, RI::ZergUltraliskCavern, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 8, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 900;
			break;
		case BuildZergDrone:
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 300;
			Prods(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergOverlord:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 600;
			Prods(res, 16, RI::ZergSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergMutalisk:
			Needs(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 600;
			break;
		case BuildZergGuardian:
			Needs(res, 1, RI::ZergGreaterSpire, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
			applytime += 600;
			break;
		case BuildZergQueen:
			Needs(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 750;
			break;
		case BuildZergDefiler:
			Needs(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 750;
			break;
		case BuildZergScourge:
			Needs(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
			Consums(res, 25, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 75, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 1, RI::Larva, interval, applytime, pushdecs);
			applytime += 450;
			break;
		case BuildZergInfestedTerran:
			Needs(res, 1, RI::ZergInfestedCommandCenter, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			applytime += 600;
			break;
		case BuildTerranValkyrie:
			Needs(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
			Consums(res, 250, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 125, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 6, RI::TerranSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 750;
			Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossCorsair:
			Needs(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossDarkTemplar:
			Needs(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			Needs(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			Consums(res, 125, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 750;
			Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergDevourer:
			Needs(res, 1, RI::ZergGreaterSpire, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
			applytime += 600;
			break;
		case BuildProtossProbe:
			Needs(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 2, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
			applytime += 300;
			Unlocks(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
			Prods(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossZealot:
			Needs(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossDragoon:
			Needs(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			Needs(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
			Consums(res, 125, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 750;
			Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossHighTemplar:
			Needs(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			Needs(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 750;
			Unlocks(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossShuttle:
			Needs(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Locks(res, 4, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			applytime += 900;
			Unlocks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossScout:
			Needs(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			Consums(res, 275, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 125, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 6, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 1200;
			Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossArbiter:
			Needs(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			Needs(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 350, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 8, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 2400;
			Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossCarrier:
			Needs(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			Needs(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
			Consums(res, 350, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 250, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 12, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 2100;
			Unlocks(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossReaver:
			Needs(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			Needs(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 8, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			applytime += 1050;
			Unlocks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossObserver:
			Needs(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			Needs(res, 1, RI::ProtossObservatory, interval, applytime, pushdecs);
			Consums(res, 25, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 75, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 2, RI::ProtossSupply, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergLurker:
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 4, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::TechLurkerAspect, interval, applytime, pushdecs);
			applytime += 600;
			break;
		case BuildTerranCommandCenter:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Consums(res, 400, RI::Minerals, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			Prods(res, 20, RI::TerranSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranComsatStation:
			Locks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranNuclearSilo:
			Locks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			applytime += 1200;
			Unlocks(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranSupplyDepot:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			Prods(res, 16, RI::TerranSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranRefinery:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			Prods(res, 3, RI::GasWorkingPlaces, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranBarracks:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranAcademy:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranFactory:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranStarport:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			applytime += 1050;
			Prods(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranControlTower:
			Locks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranScienceFacility:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranStarport, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranCovertOps:
			Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranPhysicsLab:
			Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranMachineShop:
			Locks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Needs(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			applytime += 600;
			Unlocks(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranEngineeringBay:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranCommandCenter, interval, applytime, pushdecs);
			Consums(res, 125, RI::Minerals, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranArmory:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranFactory, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TerranArmory, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranMissileTurret:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranEngineeringBay, interval, applytime, pushdecs);
			Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
			applytime += 450;
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildTerranBunker:
			Locks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::TerranBarracks, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			applytime += 450;
			Unlocks(res, 1, RI::TerranWorker, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergHatchery:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
			Prods(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergLair:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			applytime += 1500;
			Prods(res, 1, RI::ZergLair, interval, applytime, pushdecs);
			Prods(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergHive:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergLair, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::ZergHive, interval, applytime, pushdecs);
			Prods(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergNydusCanal:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergHive, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			applytime += 600;
			applytime += 1;
			break;
		case BuildZergHydraliskDen:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 50, RI::Gas, interval, applytime, pushdecs);
			applytime += 600;
			Prods(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergDefilerMound:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergHive, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergGreaterSpire:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::ZergGreaterSpire, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergQueensNest:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergLair, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergEvolutionChamber:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
			Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
			applytime += 600;
			Prods(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergUltraliskCavern:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergHive, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::ZergUltraliskCavern, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergSpire:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergLair, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::ZergSpire, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergSpawningPool:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildZergCreepColony:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 75, RI::Minerals, interval, applytime, pushdecs);
			applytime += 300;
			applytime += 1;
			break;
		case BuildZergSporeColony:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergEvolutionChamber, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			applytime += 300;
			applytime += 1;
			break;
		case BuildZergSunkenColony:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Needs(res, 1, RI::ZergSpawningPool, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			applytime += 300;
			applytime += 1;
			break;
		case BuildZergExtractor:
			Locks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			applytime += 45;
			Unlocks(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Consums(res, 1, RI::ZergWorker, interval, applytime, pushdecs);
			Unlocks(res, 2, RI::ZergSupply, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			applytime += 600;
			Prods(res, 3, RI::GasWorkingPlaces, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossNexus:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Consums(res, 400, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
			Prods(res, 18, RI::ProtossSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossRoboticsFacility:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossPylon:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 450;
			Prods(res, 16, RI::ProtossSupply, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossAssimilator:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 600;
			Prods(res, 3, RI::GasWorkingPlaces, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossObservatory:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			Consums(res, 50, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 450;
			Prods(res, 1, RI::ProtossObservatory, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossGateway:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossPhotonCannon:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 750;
			applytime += 1;
			break;
		case BuildProtossCitadelofAdun:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ProtossCitadelofAdun, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossCyberneticsCore:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossTemplarArchives:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossCitadelofAdun, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossForge:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossNexus, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 600;
			Prods(res, 1, RI::ProtossForge, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossStargate:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossCyberneticsCore, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 1050;
			Prods(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossFleetBeacon:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossStargate, interval, applytime, pushdecs);
			Consums(res, 300, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossArbiterTribunal:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 900;
			Prods(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossRoboticsSupportBay:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossRoboticsFacility, interval, applytime, pushdecs);
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 450;
			Prods(res, 1, RI::ProtossRoboticsSupportBay, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case BuildProtossShieldBattery:
			Locks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 45;
			Needs(res, 1, RI::ProtossGateway, interval, applytime, pushdecs);
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossWorker, interval, applytime, pushdecs);
			applytime += 450;
			applytime += 1;
			break;
		case TechStimPacks:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechStimPacks, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechLockdown:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
			applytime += 1500;
			Prods(res, 1, RI::TechLockdown, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechEMPShockwave:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TechEMPShockwave, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechSpiderMines:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechSpiderMines, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechTankSiegeMode:
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechTankSiegeMode, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranMachineShop, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechIrradiate:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechIrradiate, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranScienceFacility, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechYamatoGun:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranPhysicsLab, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TechYamatoGun, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranPhysicsLab, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechCloakingField:
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
			applytime += 1500;
			Prods(res, 1, RI::TechCloakingField, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranControlTower, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechPersonnelCloaking:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechPersonnelCloaking, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranCovertOps, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechBurrowing:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechBurrowing, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ZergHatchery, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechSpawnBroodlings:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechSpawnBroodlings, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechPlague:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
			applytime += 1500;
			Prods(res, 1, RI::TechPlague, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechConsume:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
			applytime += 1500;
			Prods(res, 1, RI::TechConsume, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ZergDefilerMound, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechEnsnare:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechEnsnare, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ZergQueensNest, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechPsionicStorm:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TechPsionicStorm, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechHallucination:
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechHallucination, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechRecall:
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TechRecall, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechStasisField:
			Consums(res, 150, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 150, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
			applytime += 1500;
			Prods(res, 1, RI::TechStasisField, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossArbiterTribunal, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechRestoration:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechRestoration, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechDisruptionWeb:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
			applytime += 1200;
			Prods(res, 1, RI::TechDisruptionWeb, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossFleetBeacon, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechMindControl:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TechMindControl, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechOpticalFlare:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TechOpticalFlare, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::TerranAcademy, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechMaelstrom:
			Consums(res, 100, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 100, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1500;
			Prods(res, 1, RI::TechMaelstrom, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ProtossTemplarArchives, interval, applytime, pushdecs);
			applytime += 1;
			break;
		case TechLurkerAspect:
			Consums(res, 200, RI::Minerals, interval, applytime, pushdecs);
			Consums(res, 200, RI::Gas, interval, applytime, pushdecs);
			Locks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
			applytime += 1800;
			Prods(res, 1, RI::TechLurkerAspect, interval, applytime, pushdecs);
			Unlocks(res, 1, RI::ZergHydraliskDen, interval, applytime, pushdecs);
			applytime += 1;
			break;
	}
}

